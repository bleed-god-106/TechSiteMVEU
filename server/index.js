const express = require('express');
const cors = require('cors');
const { MongoClient, ObjectId, GridFSBucket } = require('mongodb');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const app = express();
const PORT = process.env.PORT || 3001;
const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/tech-site-craft';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const JWT_SECRET = 'your-super-secret-jwt-key-change-this-in-production';

// Middleware
app.use(cors());
app.use(express.json());

let db;
const client = new MongoClient(MONGO_URI); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º client –∑–¥–µ—Å—å

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
function createSlug(name) {
  return name
    .toLowerCase()
    .replace(/[–∞-—è]/g, (char) => {
      const map = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
      };
      return map[char] || char;
    })
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim('-');
}

// API Routes

// –û—Ç–¥–µ–ª—ã
app.get('/api/departments', async (req, res) => {
  try {
    const departments = await db.collection('departments').find({}).sort({ name: 1 }).toArray();
    res.json(departments.map(dept => ({
      ...dept,
      _id: dept._id.toString()
    })));
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
app.get('/api/employees', async (req, res) => {
  try {
    const employees = await db.collection('employees').find({}).sort({ lastName: 1, firstName: 1 }).toArray();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–¥–µ–ª–∞—Ö
    const employeesWithDepartments = await Promise.all(
      employees.map(async (emp) => {
        let department = undefined;
        if (emp.departmentId) {
          const dept = await db.collection('departments').findOne({ _id: emp.departmentId });
          if (dept) {
            department = {
              _id: dept._id.toString(),
              name: dept.name,
              description: dept.description,
              createdAt: dept.createdAt
            };
          }
        }
        
        return {
          ...emp,
          _id: emp._id.toString(),
          departmentId: emp.departmentId?.toString(),
          userId: emp.userId?.toString(),
          department,
          // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
          name: emp.displayName || `${emp.lastName} ${emp.firstName}${emp.middleName ? ` ${emp.middleName}` : ''}`,
          email: emp.workEmail || emp.personalEmail,
          phone: emp.workPhone || emp.personalPhone,
          image: emp.avatar
        };
      })
    );
    
    res.json(employeesWithDepartments);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞
app.post('/api/employees', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }

    const { 
      firstName, 
      lastName, 
      middleName,
      position, 
      departmentId,
      employeeId,
      personalPhone,
      workPhone,
      personalEmail,
      workEmail,
      address,
      hireDate,
      birthDate,
      education,
      skills,
      experience,
      salary,
      emergencyContact,
      avatar,
      bio,
      notes,
      createAccount = true,
      accountRole = 'admin',
      accountPassword,
      permissions = []
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!firstName || !lastName || !position) {
      return res.status(400).json({ error: '–ò–º—è, —Ñ–∞–º–∏–ª–∏—è –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º email –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    const email = workEmail || personalEmail;
    if (createAccount && !email) {
      return res.status(400).json({ error: 'Email (—Ä–∞–±–æ—á–∏–π –∏–ª–∏ –ª–∏—á–Ω—ã–π) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    if (employeeId) {
      const existingEmployee = await db.collection('employees').findOne({ employeeId });
      if (existingEmployee) {
        return res.status(400).json({ error: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º —Ç–∞–±–µ–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }
    }

    let userId = null;
    
    let generatedPassword = null;
    
    // –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (createAccount && email) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const existingUser = await db.collection('users').findOne({ email });
      if (existingUser) {
        return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
      const password = accountPassword || generatePassword();
      generatedPassword = password; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–≤–µ—Ç–∞
      const hashedPassword = await bcrypt.hash(password, 12);

      const fullName = `${firstName} ${lastName}${middleName ? ` ${middleName}` : ''}`;
      
      const userData = {
        name: fullName,
        email,
        password: hashedPassword,
        role: accountRole,
        permissions: permissions || [],
        createdAt: new Date(),
        profile: {
          firstName,
          lastName,
          middleName: middleName || '',
          phone: personalPhone || workPhone || '',
          position: position,
          department: departmentId ? departmentId : null,
          employeeId: employeeId || '',
          avatar: avatar || ''
        }
      };

      const userResult = await db.collection('users').insertOne(userData);
      userId = userResult.insertedId.toString();

      console.log(`üë§ –°–æ–∑–¥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${fullName}:`);
      console.log(`   üìß Email: ${email}`);
      console.log(`   üîë –ü–∞—Ä–æ–ª—å: ${password}`);
      console.log(`   üëë –†–æ–ª—å: ${accountRole}`);
      console.log(`   üîê –ü—Ä–∞–≤–∞: ${permissions.join(', ') || '–ë–∞–∑–æ–≤—ã–µ'}`);
    }

    // –°–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const employeeData = {
      firstName,
      lastName,
      middleName: middleName || null,
      displayName: `${lastName} ${firstName}${middleName ? ` ${middleName}` : ''}`,
      position,
      departmentId: departmentId ? new ObjectId(departmentId) : null,
      employeeId: employeeId || null,
      
      // –ö–æ–Ω—Ç–∞–∫—Ç—ã
      personalPhone: personalPhone || null,
      workPhone: workPhone || null,
      personalEmail: personalEmail || null,
      workEmail: workEmail || null,
      
      // –ê–¥—Ä–µ—Å
      address: address || null,
      
      // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      hireDate: hireDate ? new Date(hireDate) : null,
      birthDate: birthDate ? new Date(birthDate) : null,
      education: education || null,
      skills: skills || [],
      experience: experience || null,
      salary: salary || null,
      
      // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
      emergencyContact: emergencyContact || null,
      
      // –§–∞–π–ª—ã
      avatar: avatar || '/placeholder-avatar.jpg',
      resume: null,
      documents: [],
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      bio: bio || null,
      notes: notes || null,
      
      // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
      userId: userId ? new ObjectId(userId) : null,
      isActive: true,
      createdAt: new Date()
    };

    const result = await db.collection('employees').insertOne(employeeData);
    const employee = await db.collection('employees').findOne({ _id: result.insertedId });

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–¥–µ–ª–µ
    let department = undefined;
    if (employee.departmentId) {
      const dept = await db.collection('departments').findOne({ _id: employee.departmentId });
      if (dept) {
        department = {
          _id: dept._id.toString(),
          name: dept.name,
          description: dept.description,
          createdAt: dept.createdAt
        };
      }
    }

    const responseData = {
      ...employee,
      _id: employee._id.toString(),
      departmentId: employee.departmentId?.toString(),
      userId: employee.userId?.toString(),
      department
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –≤ –æ—Ç–≤–µ—Ç
    if (createAccount && email && generatedPassword) {
      responseData.accountCreated = {
        email,
        password: generatedPassword,
        role: accountRole,
        message: '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
      };
    }

    res.status(201).json(responseData);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
app.put('/api/employees/:id', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }

    const { id } = req.params;
    const updateData = { ...req.body };

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    updateData.updatedAt = new Date();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º departmentId
    if (updateData.departmentId) {
      updateData.departmentId = new ObjectId(updateData.departmentId);
    }

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é
    delete updateData._id;
    delete updateData.createdAt;

    const result = await db.collection('employees').updateOne(
      { _id: new ObjectId(id) },
      { $set: updateData }
    );

    if (result.matchedCount === 0) {
      return res.status(404).json({ error: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const employee = await db.collection('employees').findOne({ _id: new ObjectId(id) });
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–¥–µ–ª–µ
    let department = undefined;
    if (employee.departmentId) {
      const dept = await db.collection('departments').findOne({ _id: employee.departmentId });
      if (dept) {
        department = {
          _id: dept._id.toString(),
          name: dept.name,
          description: dept.description,
          createdAt: dept.createdAt
        };
      }
    }

    res.json({
      ...employee,
      _id: employee._id.toString(),
      departmentId: employee.departmentId?.toString(),
      userId: employee.userId?.toString(),
      department
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
app.delete('/api/employees/:id', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }

    const { id } = req.params;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const employee = await db.collection('employees').findOne({ _id: new ObjectId(id) });
    if (!employee) {
      return res.status(404).json({ error: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (employee.userId) {
      await db.collection('users').deleteOne({ _id: employee.userId });
      console.log(`üë§ –£–¥–∞–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${employee.name}`);
    }

    // –£–¥–∞–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const result = await db.collection('employees').deleteOne({ _id: new ObjectId(id) });
    
    if (result.deletedCount === 0) {
      return res.status(404).json({ error: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({ 
      message: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
      deletedEmployee: {
        _id: employee._id.toString(),
        name: employee.name,
        email: employee.email
      },
      accountDeleted: !!employee.userId
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
function generatePassword() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let password = '';
  for (let i = 0; i < 8; i++) {
    password += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return password;
}

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
app.get('/api/product-categories', async (req, res) => {
  try {
    const categories = await db.collection('productcategories').find({}).sort({ name: 1 }).toArray();
    res.json(categories.map(cat => ({
      ...cat,
      _id: cat._id.toString()
    })));
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ü—Ä–æ–¥—É–∫—Ç—ã
app.get('/api/products', async (req, res) => {
  try {
    const products = await db.collection('products').find({}).sort({ name: 1 }).toArray();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
    const productsWithCategories = await Promise.all(
      products.map(async (prod) => {
        let category = undefined;
        if (prod.categoryId) {
          const cat = await db.collection('productcategories').findOne({ _id: prod.categoryId });
          if (cat) {
            category = {
              _id: cat._id.toString(),
              name: cat.name,
              slug: cat.slug,
              createdAt: cat.createdAt
            };
          }
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ reviews
        const reviews = await db.collection('reviews').find({ productId: prod._id }).toArray();
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤
        let averageRating = 0;
        if (reviews.length > 0) {
          const totalRating = reviews.reduce((sum, review) => sum + (review.rating || 0), 0);
          averageRating = totalRating / reviews.length;
        }
        
        return {
          ...prod,
          _id: prod._id.toString(),
          categoryId: prod.categoryId?.toString(),
          category,
          rating: averageRating,
          reviewCount: reviews.length,
          // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–∑—ã–≤—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞
          reviews: undefined
        };
      })
    );
    
    res.json(productsWithCategories);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ê–¥–º–∏–Ω: –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
app.get('/api/admin/products', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }

    console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏');
    
    const products = await db.collection('products').find({}).sort({ name: 1 }).toArray();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
    const productsWithCategories = await Promise.all(
      products.map(async (prod) => {
        let category = undefined;
        if (prod.categoryId) {
          const cat = await db.collection('productcategories').findOne({ _id: prod.categoryId });
          if (cat) {
            category = {
              _id: cat._id.toString(),
              name: cat.name,
              slug: cat.slug,
              createdAt: cat.createdAt
            };
          }
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ reviews
        const reviews = await db.collection('reviews').find({ productId: prod._id }).toArray();
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤
        let averageRating = 0;
        if (reviews.length > 0) {
          const totalRating = reviews.reduce((sum, review) => sum + (review.rating || 0), 0);
          averageRating = totalRating / reviews.length;
        }
        
        return {
          ...prod,
          _id: prod._id.toString(),
          categoryId: prod.categoryId?.toString(),
          category,
          rating: averageRating,
          reviewCount: reviews.length,
          // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–∑—ã–≤—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞
          reviews: undefined
        };
      })
    );
    
    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${productsWithCategories.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —á–∞—Ç–æ–≤`);
    res.json(productsWithCategories);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ù–æ–≤–æ—Å—Ç–∏
app.get('/api/news', async (req, res) => {
  try {
    const publishedOnly = req.query.published === 'true';
    const filter = publishedOnly ? { published: true } : {};
    const news = await db.collection('news').find(filter).sort({ createdAt: -1 }).toArray();
    
    res.json(news.map(item => ({
      ...item,
      _id: item._id.toString()
    })));
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
app.get('/api/product-categories', async (req, res) => {
  try {
    const categories = await db.collection('productcategories').find({}).sort({ name: 1 }).toArray();
    
    res.json(categories.map(category => ({
      _id: category._id.toString(),
      name: category.name,
      description: category.description,
      slug: category.slug,
      createdAt: category.createdAt
    })));
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    const user = await db.collection('users').findOne({ email });
    if (!user) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }
    
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }
    
    const token = jwt.sign(
      { userId: user._id.toString(), email: user.email, role: user.role },
      JWT_SECRET,
      { expiresIn: '7d' }
    );
    
    res.json({
      user: {
        _id: user._id.toString(),
        name: user.name,
        email: user.email,
        role: user.role
      },
      token
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.post('/api/auth/register', async (req, res) => {
  try {
    const { name, email, password } = req.body;
    
    const existingUser = await db.collection('users').findOne({ email });
    if (existingUser) {
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }
    
    const hashedPassword = await bcrypt.hash(password, 12);
    
    const userData = {
      name,
      email,
      password: hashedPassword,
      role: email === 'test@admin.com' ? 'admin' : 'user',
      createdAt: new Date()
    };
    
    const result = await db.collection('users').insertOne(userData);
    const user = await db.collection('users').findOne({ _id: result.insertedId });
    
    const token = jwt.sign(
      { userId: user._id.toString(), email: user.email, role: user.role },
      JWT_SECRET,
      { expiresIn: '7d' }
    );
    
    res.json({
      user: {
        _id: user._id.toString(),
        name: user.name,
        email: user.email,
        role: user.role
      },
      token
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
app.get('/api/auth/me', async (req, res) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å /api/auth/me');
    console.log('Headers:', req.headers.authorization);
    
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      console.log('–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω:', token.substring(0, 20) + '...');
    const decoded = jwt.verify(token, JWT_SECRET);
    console.log('–¢–æ–∫–µ–Ω –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:', decoded);
    
    const user = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!user) {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID:', decoded.userId);
      return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.email);
    res.json({
      _id: user._id.toString(),
      name: user.name,
      email: user.email,
      role: user.role,
      avatar: user.avatar,
      profile: user.profile || {}
    });
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error.message);
    res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/api/auth/profile', async (req, res) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:', JSON.stringify(req.body, null, 2));
    
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const user = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!user) {
      return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const { name, avatar, profile } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (name && (typeof name !== 'string' || name.trim().length < 2)) {
      return res.status(400).json({ error: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞' });
    }
    
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ +7 (999) 999-99-99
    if (profile?.phone && profile.phone.trim() !== '') {
      // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã, —Å–∫–æ–±–∫–∏ –∏ –¥–µ—Ñ–∏—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const cleanPhone = profile.phone.replace(/[\s\-\(\)]/g, '');
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7xxxxxxxxxx (11 —Ü–∏—Ñ—Ä)
      if (!/^\+7\d{10}$/.test(cleanPhone)) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +7 (999) 999-99-99' });
      }
    }
    
    if (profile?.dateOfBirth && isNaN(Date.parse(profile.dateOfBirth))) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è' });
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
    if (avatar && typeof avatar === 'string') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (!avatar.startsWith('data:image/')) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 5MB in base64)
      if (avatar.length > 7000000) { // ~5MB in base64
        return res.status(400).json({ error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å–∏–º—É–º 5MB)' });
      }
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData = {
      updatedAt: new Date()
    };
    
    if (name && name.trim() !== user.name) {
      updateData.name = name.trim();
    }
    
    if (avatar !== undefined) {
      updateData.avatar = avatar;
    }
    
    if (profile) {
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      updateData.profile = {
        ...user.profile,
        ...profile,
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω address, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –µ–≥–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
        address: profile.address ? {
          ...user.profile?.address,
          ...profile.address
        } : user.profile?.address
      };
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const result = await db.collection('users').updateOne(
      { _id: new ObjectId(decoded.userId) },
      { $set: updateData }
    );
    
    if (result.matchedCount === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.params.id} –æ–±–Ω–æ–≤–ª–µ–Ω`);
    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.get('/api/users', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }
    
    const users = await db.collection('users').find({}).sort({ createdAt: -1 }).toArray();
    
    res.json(users.map(user => ({
      _id: user._id.toString(),
      name: user.name,
      email: user.email,
      role: user.role,
      createdAt: user.createdAt
    })));
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
app.post('/api/orders', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const user = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!user) {
      return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const { items, deliveryInfo, total } = req.body;
    
    if (!items || !Array.isArray(items) || items.length === 0) {
      return res.status(400).json({ error: '–¢–æ–≤–∞—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –∏—Ö (–±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
    const processedItems = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    for (const item of items) {
      const product = await db.collection('products').findOne({ _id: new ObjectId(item.productId) });
      
      if (!product) {
        return res.status(400).json({ error: `–¢–æ–≤–∞—Ä —Å ID ${item.productId} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
      }
      
      if (product.isActive === false) {
        return res.status(400).json({ error: `–¢–æ–≤–∞—Ä "${product.name}" –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞` });
      }
      
      const currentStock = product.stockQuantity || 0;
      if (currentStock < item.quantity) {
        return res.status(400).json({ error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ "${product.name}" –Ω–∞ —Å–∫–ª–∞–¥–µ. –î–æ—Å—Ç—É–ø–Ω–æ: ${currentStock}, –∑–∞–ø—Ä–æ—à–µ–Ω–æ: ${item.quantity}` });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞
      const newStock = currentStock - item.quantity;
      
      // –ù–ï –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
      await db.collection('products').updateOne(
        { _id: new ObjectId(item.productId) },
        { 
          $set: { 
            stockQuantity: newStock,
            updatedAt: new Date()
          }
        }
      );
      
      const stockStatus = newStock <= 0 ? ' (–ù–ï–¢ –í –ù–ê–õ–ò–ß–ò–ò)' : newStock <= (product.minStockLevel || 5) ? ' (–°–ö–û–†–û –ó–ê–ö–û–ù–ß–ò–¢–°–Ø)' : '';
      console.log(`üì¶ –¢–æ–≤–∞—Ä "${product.name}": –æ—Å—Ç–∞—Ç–æ–∫ ${currentStock} ‚Üí ${newStock}${stockStatus}`);
      
      processedItems.push({
        productId: item.productId,
        productName: product.name,
        price: item.price,
        quantity: item.quantity,
        total: item.price * item.quantity
      });
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    const orderNumber = `ORD-${Date.now()}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`;
    
    const orderData = {
      orderNumber,
      userId: user._id,
      userInfo: {
        name: user.name,
        email: user.email
      },
      items: processedItems,
      deliveryInfo: {
        type: deliveryInfo.type, // 'pickup' –∏–ª–∏ 'delivery'
        phone: deliveryInfo.phone,
        address: deliveryInfo.address || null
      },
      total,
      status: 'pending', // pending, confirmed, processing, shipped, delivered, cancelled
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    const result = await db.collection('orders').insertOne(orderData);
    
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑:', orderNumber, '–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.email);
    
    res.json({
      _id: result.insertedId.toString(),
      orderNumber: orderNumber,
      status: 'pending',
      total: total,
      createdAt: orderData.createdAt
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/orders', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const user = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!user) {
      return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const orders = await db.collection('orders')
      .find({ userId: user._id })
      .sort({ createdAt: -1 })
      .toArray();
    
    res.json(orders.map(order => ({
      _id: order._id.toString(),
      orderNumber: order.orderNumber,
      items: order.items,
      deliveryInfo: order.deliveryInfo,
      total: order.total,
      status: order.status,
      createdAt: order.createdAt,
      updatedAt: order.updatedAt
    })));
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.get('/api/orders/all', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }
    
    const orders = await db.collection('orders')
      .find({})
      .sort({ createdAt: -1 })
      .toArray();
    
    res.json(orders.map(order => ({
      _id: order._id.toString(),
      orderNumber: order.orderNumber,
      userInfo: order.userInfo,
      items: order.items,
      deliveryInfo: order.deliveryInfo,
      total: order.total,
      status: order.status,
      createdAt: order.createdAt,
      updatedAt: order.updatedAt
    })));
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.put('/api/orders/:id/status', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }
    
    const { status } = req.body;
    const validStatuses = ['pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled'];
    
    if (!validStatuses.includes(status)) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const order = await db.collection('orders').findOne({ _id: new ObjectId(req.params.id) });
    
    if (!order) {
      return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
    if (status === 'cancelled' && order.status !== 'cancelled') {
      console.log(`üîÑ –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ ${order.orderNumber} - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥`);
      
      for (const item of order.items) {
        const product = await db.collection('products').findOne({ _id: new ObjectId(item.productId) });
        
        if (product) {
          const newStock = (product.stockQuantity || 0) + item.quantity;
          
          // –ù–ï —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
          await db.collection('products').updateOne(
            { _id: new ObjectId(item.productId) },
            { 
              $set: { 
                stockQuantity: newStock,
                updatedAt: new Date()
              }
            }
          );
          
          const stockStatus = newStock <= 0 ? ' (–ù–ï–¢ –í –ù–ê–õ–ò–ß–ò–ò)' : newStock <= (product.minStockLevel || 5) ? ' (–°–ö–û–†–û –ó–ê–ö–û–ù–ß–ò–¢–°–Ø)' : '';
          console.log(`üì¶ –¢–æ–≤–∞—Ä "${product.name}": –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${item.quantity} —à—Ç., –æ—Å—Ç–∞—Ç–æ–∫: ${newStock}${stockStatus}`);
        }
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    const result = await db.collection('orders').updateOne(
      { _id: new ObjectId(req.params.id) },
      { 
        $set: { 
          status,
          updatedAt: new Date()
        }
      }
    );
    
    if (result.matchedCount === 0) {
      return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${order.orderNumber} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${status}`);
    res.json({ message: '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω' });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.delete('/api/orders/:id', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const order = await db.collection('orders').findOne({ _id: new ObjectId(req.params.id) });
    
    if (!order) {
      return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
    if (order.status !== 'cancelled') {
      console.log(`üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ${order.orderNumber} - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥`);
      
      for (const item of order.items) {
        const product = await db.collection('products').findOne({ _id: new ObjectId(item.productId) });
        
        if (product) {
          const newStock = (product.stockQuantity || 0) + item.quantity;
          
          await db.collection('products').updateOne(
            { _id: new ObjectId(item.productId) },
            { 
              $set: { 
                stockQuantity: newStock,
                updatedAt: new Date()
              }
            }
          );
          
          const stockStatus = newStock <= 0 ? ' (–ù–ï–¢ –í –ù–ê–õ–ò–ß–ò–ò)' : newStock <= (product.minStockLevel || 5) ? ' (–°–ö–û–†–û –ó–ê–ö–û–ù–ß–ò–¢–°–Ø)' : '';
          console.log(`üì¶ –¢–æ–≤–∞—Ä "${product.name}": –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${item.quantity} —à—Ç., –æ—Å—Ç–∞—Ç–æ–∫: ${newStock}${stockStatus}`);
        }
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
    const result = await db.collection('orders').deleteOne({ _id: new ObjectId(req.params.id) });
    
    if (result.deletedCount === 0) {
      return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    console.log(`üóëÔ∏è –ó–∞–∫–∞–∑ ${order.orderNumber} —É–¥–∞–ª–µ–Ω`);
    res.json({ message: '–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω', orderNumber: order.orderNumber });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.delete('/api/users/:id', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }
    
    // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if (req.params.id === currentUser._id.toString()) {
      return res.status(400).json({ error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç' });
    }
    
    const result = await db.collection('users').deleteOne({ _id: new ObjectId(req.params.id) });
    
    if (result.deletedCount === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.params.id} —É–¥–∞–ª–µ–Ω`);
    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.put('/api/users/:id/role', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }
    
    const { role } = req.body;
    const validRoles = ['admin', 'user'];
    
    if (!validRoles.includes(role)) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }
    
    // –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if (req.params.id === currentUser._id.toString()) {
      return res.status(400).json({ error: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–æ–ª—å' });
    }
    
    const result = await db.collection('users').updateOne(
      { _id: new ObjectId(req.params.id) },
      { 
        $set: { 
          role: role,
          updatedAt: new Date()
        }
      }
    );
    
    if (result.matchedCount === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    console.log(`–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.params.id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${role}`);
    res.json({ message: '–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', role });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.put('/api/users/:id', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }
    
    const { name, email, profile } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (email) {
      const existingUser = await db.collection('users').findOne({ 
        email: email,
        _id: { $ne: new ObjectId(req.params.id) }
      });
      
      if (existingUser) {
        return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }
    }
    
    const updateData = {
      updatedAt: new Date()
    };
    
    if (name) updateData.name = name;
    if (email) updateData.email = email;
    if (profile) updateData.profile = profile;
    
    const result = await db.collection('users').updateOne(
      { _id: new ObjectId(req.params.id) },
      { $set: updateData }
    );
    
    if (result.matchedCount === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.params.id} –æ–±–Ω–æ–≤–ª–µ–Ω`);
    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.get('/api/users/:id/orders', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }
    
    const { id } = req.params;
    
    const orders = await db.collection('orders')
      .find({ userId: new ObjectId(id) })
      .sort({ createdAt: -1 })
      .toArray();
    
    res.json(orders.map(order => ({
      _id: order._id.toString(),
      orderNumber: order.orderNumber,
      items: order.items,
      deliveryInfo: order.deliveryInfo,
      total: order.total,
      status: order.status,
      createdAt: order.createdAt,
      updatedAt: order.updatedAt
    })));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.get('/api/users/:id/reviews', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }
    
    const { id } = req.params;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.collection('users').findOne({ _id: new ObjectId(id) });
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const reviews = await db.collection('reviews').find({
      $or: [
        { userName: user.name },
        { userEmail: user.email }
      ]
    }).sort({ date: -1 }).toArray();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
    const reviewsWithProducts = await Promise.all(
      reviews.map(async (review) => {
        const product = await db.collection('products').findOne({ _id: review.productId });
        const productName = product ? product.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä';
        const productSlug = product ? createSlug(product.name) : 'unknown';
        
        return {
          _id: review._id.toString(),
          productId: review.productId.toString(),
          productName,
          productSlug,
          rating: review.rating,
          comment: review.comment,
          date: review.date,
          orderNumber: review.orderNumber
        };
      })
    );
    
    res.json(reviewsWithProducts);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: error.message });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.post('/api/products', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }
    
    const {
      name,
      price,
      originalPrice,
      discount,
      categoryId,
      imageUrl,
      images,
      description,
      shortDescription,
      features,
      specifications,
      tags,
      brand,
      productModel,
      sku,
      weight,
      dimensions,
      stockQuantity,
      minStockLevel,
      isActive,
      isFeatured,
      seo
    } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !price) {
      return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å SKU –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (sku) {
      const existingSku = await db.collection('products').findOne({ sku });
      if (existingSku) {
        return res.status(400).json({ error: '–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º SKU —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }
    }
    
    const productData = {
      name,
      price: Number(price),
      originalPrice: originalPrice ? Number(originalPrice) : undefined,
      discount: discount || undefined,
      categoryId: categoryId ? new ObjectId(categoryId) : undefined,
      imageUrl: imageUrl || '/placeholder-product.jpg',
      images: images || [],
      description: description || '',
      shortDescription: shortDescription || '',
      features: features || [],
      specifications: specifications || {},
      tags: tags || [],
      brand: brand || '',
      productModel: productModel || '',
      sku: sku || undefined,
      weight: weight ? Number(weight) : undefined,
      dimensions: dimensions || undefined,
      inStock: true,
      stockQuantity: stockQuantity ? Number(stockQuantity) : 0,
      minStockLevel: minStockLevel ? Number(minStockLevel) : 5,
      isActive: isActive !== false,
      isFeatured: isFeatured === true,
      seo: seo || {},
      rating: 0,
      reviewCount: 0,
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    const result = await db.collection('products').insertOne(productData);
    const newProduct = await db.collection('products').findOne({ _id: result.insertedId });
    
    console.log(`–¢–æ–≤–∞—Ä "${name}" —Å–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${currentUser.name}`);
    res.json({
      ...newProduct,
      _id: newProduct._id.toString(),
      categoryId: newProduct.categoryId?.toString()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.put('/api/products/:id', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JWT
    let decoded;
    try {
      decoded = jwt.verify(token, JWT_SECRET);
    } catch (jwtError) {
      console.error('JWT Error:', jwtError.message);
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
    }
    
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }
    
    const productId = req.params.id;
    const updateData = { ...req.body };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    const existingProduct = await db.collection('products').findOne({ _id: new ObjectId(productId) });
    if (!existingProduct) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å SKU –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (updateData.sku && updateData.sku !== existingProduct.sku) {
      const existingSku = await db.collection('products').findOne({ 
        sku: updateData.sku,
        _id: { $ne: new ObjectId(productId) }
      });
      if (existingSku) {
        return res.status(400).json({ error: '–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º SKU —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const cleanUpdateData = {};
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    const allowedFields = [
      'name', 'price', 'originalPrice', 'discount', 'categoryId', 'imageUrl', 'images',
      'description', 'shortDescription', 'features', 'specifications', 'tags',
      'brand', 'productModel', 'sku', 'weight', 'dimensions', 'inStock',
      'stockQuantity', 'minStockLevel', 'isActive', 'isFeatured', 'seo'
    ];
    
    allowedFields.forEach(field => {
      if (updateData[field] !== undefined) {
        if (field === 'price' || field === 'originalPrice' || field === 'weight' || field === 'stockQuantity' || field === 'minStockLevel') {
          cleanUpdateData[field] = Number(updateData[field]);
        } else if (field === 'categoryId' && updateData[field]) {
          cleanUpdateData[field] = new ObjectId(updateData[field]);
        } else {
          cleanUpdateData[field] = updateData[field];
        }
      }
    });
    
    cleanUpdateData.updatedAt = new Date();
    
    const result = await db.collection('products').updateOne(
      { _id: new ObjectId(productId) },
      { $set: cleanUpdateData }
    );
    
    if (result.matchedCount === 0) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const updatedProduct = await db.collection('products').findOne({ _id: new ObjectId(productId) });
    
    console.log(`–¢–æ–≤–∞—Ä ${productId} –æ–±–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${currentUser.name}`);
    res.json({
      ...updatedProduct,
      _id: updatedProduct._id.toString(),
      categoryId: updatedProduct.categoryId?.toString()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.delete('/api/products/:id', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JWT
    let decoded;
    try {
      decoded = jwt.verify(token, JWT_SECRET);
    } catch (jwtError) {
      console.error('JWT Error:', jwtError.message);
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
    }
    
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }
    
    const productId = req.params.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    const existingProduct = await db.collection('products').findOne({ _id: new ObjectId(productId) });
    if (!existingProduct) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
    const result = await db.collection('products').deleteOne({ _id: new ObjectId(productId) });
    
    if (result.deletedCount === 0) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –∫ —ç—Ç–æ–º—É —Ç–æ–≤–∞—Ä—É
    await db.collection('reviews').deleteMany({ productId: new ObjectId(productId) });
    
    console.log(`–¢–æ–≤–∞—Ä ${productId} —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${currentUser.name}`);
    res.json({ message: '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ id
app.get('/api/products/:id', async (req, res) => {
  try {
    const id = req.params.id;
    const product = await db.collection('products').findOne({ _id: new ObjectId(id) });
    if (!product) return res.status(404).json({ error: 'Not found' });

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let category = undefined;
    if (product.categoryId) {
      const cat = await db.collection('productcategories').findOne({ _id: product.categoryId });
      if (cat) {
        category = {
          _id: cat._id.toString(),
          name: cat.name,
          slug: cat.slug,
          createdAt: cat.createdAt
        };
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const reviews = await db.collection('reviews').find({ productId: new ObjectId(id) }).toArray();
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ reviews
    let averageRating = 0;
    if (reviews.length > 0) {
      const totalRating = reviews.reduce((sum, review) => sum + (review.rating || 0), 0);
      averageRating = totalRating / reviews.length;
    }

    const safeProduct = {
      ...product,
      rating: averageRating,
      reviewCount: reviews.length,
      _id: product._id.toString(),
      categoryId: product.categoryId?.toString(),
      category,
      // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–∑—ã–≤—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞
      reviews: undefined
    };

    res.json(safeProduct);
  } catch (error) {
    res.status(400).json({ error: 'Invalid ID' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏–∑ –∑–∞–∫–∞–∑–æ–≤
app.get('/api/user/product-reviews', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö
    const reviews = await db.collection('reviews').find({ 
      $or: [
        { userName: currentUser.name },
        { userEmail: currentUser.email }
      ]
    }).sort({ date: -1 }).toArray();
    
    res.json(reviews);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ —Ç–æ–≤–∞—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
app.get('/api/products/:id/reviews', async (req, res) => {
  try {
    const productId = req.params.id;
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏—Å–ø–æ–ª—å–∑—É—è –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const reviews = await db.collection('reviews').aggregate([
      { $match: { productId: new ObjectId(productId) } },
      { $sort: { date: -1 } },
      { $skip: skip },
      { $limit: limit },
      {
        $lookup: {
          from: 'users',
          let: { 
            reviewUserName: '$userName',
            reviewUserEmail: '$userEmail'
          },
          pipeline: [
            {
              $match: {
                $expr: {
                  $or: [
                    { $eq: ['$name', '$$reviewUserName'] },
                    { $eq: ['$email', '$$reviewUserEmail'] }
                  ]
                }
              }
            }
          ],
          as: 'userInfo'
        }
      },
      {
        $addFields: {
          userAvatar: { $arrayElemAt: ['$userInfo.avatar', 0] }
        }
      },
      {
        $project: {
          userInfo: 0 // –£–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–≤–∞—Ç–∞—Ä
        }
      }
    ]).toArray();
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
    const totalReviews = await db.collection('reviews').countDocuments({ productId: new ObjectId(productId) });
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    const ratingStats = await db.collection('reviews').aggregate([
      { $match: { productId: new ObjectId(productId) } },
      { $group: { 
        _id: '$rating', 
        count: { $sum: 1 } 
      }},
      { $sort: { _id: -1 } }
    ]).toArray();
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    const avgRating = await db.collection('reviews').aggregate([
      { $match: { productId: new ObjectId(productId) } },
      { $group: { 
        _id: null, 
        avgRating: { $avg: '$rating' },
        totalCount: { $sum: 1 }
      }}
    ]).toArray();
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    res.json({
      reviews: reviews.map(review => ({
        ...review,
        _id: review._id.toString(),
        productId: review.productId.toString(),
        userId: review.userId?.toString(),
        orderId: review.orderId?.toString()
      })),
      pagination: {
        page,
        limit,
        totalReviews,
        totalPages: Math.ceil(totalReviews / limit)
      },
      stats: {
        averageRating: avgRating[0]?.avgRating || 0,
        totalReviews: avgRating[0]?.totalCount || 0,
        ratingDistribution: ratingStats.reduce((acc, stat) => {
          acc[stat._id] = stat.count;
          return acc;
        }, {})
      }
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∫ —Ç–æ–≤–∞—Ä—É –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
app.post('/api/products/:id/reviews', async (req, res) => {
  try {
    const productId = req.params.id;
    const { userName, userEmail, rating, text, orderId, orderNumber } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!userName || !text || !orderId) {
      return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5)
    const validRating = Number(rating);
    if (!validRating || validRating < 1 || validRating > 5) {
      return res.status(400).json({ error: '–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞
    if (text.trim().length === 0) {
      return res.status(400).json({ error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
    }

    if (text.trim().length < 10) {
      return res.status(400).json({ error: '–û—Ç–∑—ã–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –∏–∑ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
    const existingReview = await db.collection('reviews').findOne({
      productId: new ObjectId(productId),
      orderId: new ObjectId(orderId),
      $or: [
        { userName: userName },
        { userEmail: userEmail }
      ]
    });

    if (existingReview) {
      return res.status(400).json({ error: '–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–∞–∑—ã–≤–∞–ª —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
    const userOrders = await db.collection('orders').find({
      $or: [
        { 'deliveryInfo.phone': { $exists: true } },
        { userEmail: userEmail }
      ],
      'items.productId': productId,
      createdAt: { $lte: new Date() }
    }).sort({ createdAt: 1 }).toArray();

    // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤ —Å —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º
    let orderIndex = 1;
    for (let i = 0; i < userOrders.length; i++) {
      const order = userOrders[i];
      if (order._id.toString() === orderId) {
        orderIndex = i + 1;
        break;
      }
    }

    const review = {
      productId: new ObjectId(productId),
      orderId: new ObjectId(orderId),
      orderNumber: orderNumber,
      userName,
      userEmail: userEmail || null,
      rating: validRating, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
      text: text.trim(), // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      date: new Date(),
      orderIndex: orderIndex // –ö–∞–∫–æ–π –ø–æ —Å—á–µ—Ç—É –∑–∞–∫–∞–∑ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    };
    
    await db.collection('reviews').insertOne(review);
    res.json({ message: '–û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω', review });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.delete('/api/reviews/:id', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }
    
    const reviewId = req.params.id;
    const result = await db.collection('reviews').deleteOne({ _id: new ObjectId(reviewId) });
    
    if (result.deletedCount === 0) {
      return res.status(404).json({ error: '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    console.log(`–û—Ç–∑—ã–≤ ${reviewId} —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${currentUser.name}`);
    res.json({ message: '–û—Ç–∑—ã–≤ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
app.get('/api/stats', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const [
      totalUsers,
      totalOrders,
      totalProducts,
      totalEmployees,
      totalNews,
      totalDepartments,
      totalReviews,
      deliveredOrders,
      weeklyOrders,
      weeklyUserRegistrations,
      orderStatusStats,
      deliveryStats,
      topProducts,
      recentOrders
    ] = await Promise.all([
      db.collection('users').countDocuments(),
      db.collection('orders').countDocuments(),
      db.collection('products').countDocuments(),
      db.collection('employees').countDocuments(),
      db.collection('news').countDocuments(),
      db.collection('departments').countDocuments(),
      db.collection('reviews').countDocuments(),
      db.collection('orders').countDocuments({ status: 'delivered' }),
      
      // –ó–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      db.collection('orders').aggregate([
        {
          $match: {
            createdAt: { 
              $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) 
            }
          }
        },
        {
          $group: {
            _id: {
              $dateToString: { 
                format: "%Y-%m-%d", 
                date: "$createdAt" 
              }
            },
            count: { $sum: 1 },
            revenue: { 
              $sum: { 
                $cond: [
                  { $eq: ["$status", "delivered"] },
                  "$total",
                  0
                ]
              }
            }
          }
        },
        { $sort: { _id: 1 } }
      ]).toArray(),
      
      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      db.collection('users').aggregate([
        {
          $match: {
            createdAt: { 
              $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) 
            }
          }
        },
        {
          $group: {
            _id: {
              $dateToString: { 
                format: "%Y-%m-%d", 
                date: "$createdAt" 
              }
            },
            count: { $sum: 1 }
          }
        },
        { $sort: { _id: 1 } }
      ]).toArray(),
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–∫–∞–∑–æ–≤
      db.collection('orders').aggregate([
        {
          $group: {
            _id: "$status",
            count: { $sum: 1 }
          }
        },
        { $sort: { count: -1 } }
      ]).toArray(),
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏
      db.collection('orders').aggregate([
        {
          $group: {
            _id: "$deliveryInfo.type",
            count: { $sum: 1 }
          }
        },
        { $sort: { count: -1 } }
      ]).toArray(),
      
      // –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
      db.collection('orders').aggregate([
        { $match: { status: 'delivered' } },
        { $unwind: "$items" },
        {
          $group: {
            _id: "$items.productId",
            productName: { $first: "$items.productName" },
            totalSold: { $sum: "$items.quantity" },
            totalRevenue: { $sum: "$items.total" }
          }
        },
        { $sort: { totalSold: -1 } },
        { $limit: 10 }
      ]).toArray(),
      
      // –ó–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
      db.collection('orders').countDocuments({
        createdAt: { 
          $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) 
        }
      })
    ]);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const [totalRevenue, monthlyRevenue, avgOrderValue] = await Promise.all([
      // –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞
      db.collection('orders').aggregate([
        { $match: { status: 'delivered' } },
        { $group: { _id: null, total: { $sum: '$total' } } }
      ]).toArray(),
      
      // –í—ã—Ä—É—á–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
      db.collection('orders').aggregate([
        { 
          $match: { 
            status: 'delivered',
            createdAt: { 
              $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) 
            }
          } 
        },
        { $group: { _id: null, total: { $sum: '$total' } } }
      ]).toArray(),
      
      // –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
      db.collection('orders').aggregate([
        { $match: { status: 'delivered' } },
        { $group: { _id: null, avg: { $avg: '$total' } } }
      ]).toArray()
    ]);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ—Ä–∑–∏–Ω—ã
    const avgCartSize = await db.collection('orders').aggregate([
      {
        $group: {
          _id: null,
          avg: { 
            $avg: { 
              $sum: "$items.quantity" 
            } 
          }
        }
      }
    ]).toArray();
    
    const stats = {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      totalUsers,
      totalOrders,
      totalProducts,
      totalEmployees,
      totalNews,
      totalDepartments,
      totalReviews,
      totalCategories: await db.collection('productcategories').countDocuments(),
      
      // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      totalRevenue: totalRevenue[0]?.total || 0,
      monthlyRevenue: monthlyRevenue[0]?.total || 0,
      avgOrderValue: avgOrderValue[0]?.avg || 0,
      recentOrders,
      
      // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
      deliveredOrders,
      weeklyOrders,
      weeklyUserRegistrations,
      orderStatusStats,
      deliveryStats,
      topProducts,
      avgCartSize: avgCartSize[0]?.avg || 0,
      todayVisitors: Math.floor(Math.random() * 100) + 50, // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
      lastUpdated: new Date().toISOString()
    };
    
    res.json(stats);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: error.message });
  }
});

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
app.get('/api/admin/search', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }
    
    const { query, category } = req.query;
    
    if (!query || query.trim().length < 2) {
      return res.json({ 
        users: [], 
        orders: [], 
        products: [], 
        employees: [],
        news: []
      });
    }
    
    const searchRegex = new RegExp(query, 'i');
    let results = {
      users: [],
      orders: [],
      products: [],
      employees: [],
      news: []
    };
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!category || category === 'users') {
      const users = await db.collection('users').find({
        $or: [
          { name: searchRegex },
          { email: searchRegex }
        ]
      }).limit(20).toArray();
      
      results.users = users.map(user => ({
        _id: user._id.toString(),
        name: user.name,
        email: user.email,
        role: user.role,
        createdAt: user.createdAt,
        type: 'user'
      }));
    }
    
    // –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∏–º–≤–æ–ª–∞ #
    if (!category || category === 'orders') {
      // –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª # –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      const cleanQuery = query.replace(/^#/, '');
      const searchRegex = new RegExp(cleanQuery, 'i');
      
      const orders = await db.collection('orders').find({
        $or: [
          { orderNumber: searchRegex },
          { 'userInfo.name': searchRegex },
          { 'userInfo.email': searchRegex },
          { 'deliveryInfo.phone': searchRegex }
        ]
      }).limit(20).toArray();
      
      results.orders = orders.map(order => ({
        _id: order._id.toString(),
        orderNumber: order.orderNumber,
        userInfo: order.userInfo,
        total: order.total,
        status: order.status,
        createdAt: order.createdAt,
        type: 'order'
      }));
    }
    
    // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
    if (!category || category === 'products') {
      const products = await db.collection('products').find({
        $or: [
          { name: searchRegex },
          { description: searchRegex }
        ]
      }).limit(20).toArray();
      
      results.products = products.map(product => ({
        _id: product._id.toString(),
        name: product.name,
        description: product.description,
        price: product.price,
        categoryId: product.categoryId?.toString(),
        image: product.image || product.imageUrl,
        type: 'product'
      }));
    }
    
    // –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    if (!category || category === 'employees') {
      const employees = await db.collection('employees').find({
        $or: [
          { firstName: searchRegex },
          { lastName: searchRegex },
          { middleName: searchRegex },
          { displayName: searchRegex },
          { position: searchRegex },
          { personalEmail: searchRegex },
          { workEmail: searchRegex },
          { employeeId: searchRegex }
        ]
      }).limit(20).toArray();
      
      results.employees = employees.map(employee => ({
        _id: employee._id.toString(),
        name: employee.displayName || `${employee.lastName} ${employee.firstName}${employee.middleName ? ` ${employee.middleName}` : ''}`,
        position: employee.position,
        departmentId: employee.departmentId?.toString(),
        email: employee.workEmail || employee.personalEmail,
        phone: employee.workPhone || employee.personalPhone,
        employeeId: employee.employeeId,
        type: 'employee'
      }));
    }
    
    // –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
    if (!category || category === 'news') {
      const news = await db.collection('news').find({
        $or: [
          { title: searchRegex },
          { content: searchRegex },
          { summary: searchRegex }
        ]
      }).limit(20).toArray();
      
      results.news = news.map(item => ({
        _id: item._id.toString(),
        title: item.title,
        summary: item.summary,
        published: item.published,
        createdAt: item.createdAt,
        type: 'news'
      }));
    }
    
    res.json(results);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// API –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –Ω–æ–≤–æ—Å—Ç—è–º
app.get('/api/news/:id/comments', async (req, res) => {
  try {
    const { id } = req.params;
    
    const comments = await db.collection('comments').find({
      newsId: id,
      isApproved: true
    }).sort({ createdAt: -1 }).toArray();
    
    res.json(comments.map(comment => ({
      ...comment,
      _id: comment._id.toString()
    })));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
    res.status(500).json({ error: error.message });
  }
});

app.post('/api/news/:id/comments', async (req, res) => {
  try {
    const { id } = req.params;
    const { author, email, content } = req.body;
    
    if (!author || !email || !content) {
      return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
    
    if (content.length < 10) {
      return res.status(400).json({ error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤' });
    }
    
    const comment = {
      newsId: id,
      author: author.trim(),
      email: email.trim().toLowerCase(),
      content: content.trim(),
      createdAt: new Date(),
      isApproved: false // —Ç—Ä–µ–±—É–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    };
    
    const result = await db.collection('comments').insertOne(comment);
    
    res.status(201).json({
      message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é',
      commentId: result.insertedId.toString()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
    res.status(500).json({ error: error.message });
  }
});

// API –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (Contact Form 7)
app.post('/api/contact', async (req, res) => {
  try {
    const { name, email, phone, subject, message } = req.body;
    
    if (!name || !email || !subject || !message) {
      return res.status(400).json({ error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –∏–º—è, email, —Ç–µ–º–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ' });
    }
    
    const contactMessage = {
      name: name.trim(),
      email: email.trim().toLowerCase(),
      phone: phone?.trim() || '',
      subject: subject.trim(),
      message: message.trim(),
      createdAt: new Date(),
      isRead: false
    };
    
    const result = await db.collection('contact_messages').insertOne(contactMessage);
    
    console.log(`üìß –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${name} (${email}): ${subject}`);
    
    res.status(201).json({
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
      messageId: result.insertedId.toString()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({ error: error.message });
  }
});

// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.get('/api/admin/contact-messages', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    const messages = await db.collection('contact_messages')
      .find({})
      .sort({ createdAt: -1 })
      .toArray();
    
    res.json(messages.map(msg => ({
      ...msg,
      _id: msg._id.toString()
    })));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    res.status(500).json({ error: error.message });
  }
});

// –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
app.put('/api/admin/contact-messages/:id/read', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    const { id } = req.params;
    
    await db.collection('contact_messages').updateOne(
      { _id: new ObjectId(id) },
      { $set: { isRead: true } }
    );
    
    res.json({ message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({ error: error.message });
  }
});

// –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
app.delete('/api/admin/contact-messages/:id', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    const { id } = req.params;
    
    await db.collection('contact_messages').deleteOne({ _id: new ObjectId(id) });
    
    console.log(`üóëÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${id} —É–¥–∞–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${currentUser.name}`);
    
    res.json({ message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({ error: error.message });
  }
});

// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.get('/api/admin/comments', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    const comments = await db.collection('comments')
      .find({})
      .sort({ createdAt: -1 })
      .toArray();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ—Å—Ç—è—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const commentsWithNews = await Promise.all(comments.map(async (comment) => {
      const news = await db.collection('news').findOne({ _id: new ObjectId(comment.newsId) });
      return {
        ...comment,
        _id: comment._id.toString(),
        newsTitle: news ? news.title : '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      };
    }));
    
    res.json(commentsWithNews);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
    res.status(500).json({ error: error.message });
  }
});

// –û–¥–æ–±—Ä–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
app.put('/api/admin/comments/:id/approve', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    const { id } = req.params;
    
    await db.collection('comments').updateOne(
      { _id: new ObjectId(id) },
      { $set: { isApproved: true } }
    );
    
    res.json({ message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–¥–æ–±—Ä–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
    res.status(500).json({ error: error.message });
  }
});

// –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
app.delete('/api/admin/comments/:id', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    const { id } = req.params;
    
    await db.collection('comments').deleteOne({ _id: new ObjectId(id) });
    
    res.json({ message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
    res.status(500).json({ error: error.message });
  }
});

// ===== –ß–ê–¢-–°–ò–°–¢–ï–ú–ê =====

// –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
app.post('/api/chat/start', async (req, res) => {
  try {
    const { userId, guestName, guestEmail, message } = req.body;
    
    console.log('üîç –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', {
      userId,
      guestName, 
      guestEmail,
      message,
      messageLength: message ? message.length : 0
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
    if (!message || !message.trim()) {
      console.log('‚ùå –û—Ç–∫–ª–æ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
    }
    
    const trimmedMessage = message.trim();
    
    const chatSession = {
      userId: userId || null,
      guestName: guestName || null,
      guestEmail: guestEmail || null,
      status: 'waiting',
      messages: [
        {
          type: 'system',
          content: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ BT-Tech! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
          timestamp: new Date().toISOString()
        },
        {
          type: 'user',
          content: trimmedMessage,
          timestamp: new Date().toISOString(),
          author: userId ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : guestName
        }
      ],
      createdAt: new Date().toISOString(),
      lastActivity: new Date().toISOString(),
      surveyCompleted: false
    };
    
    const result = await db.collection('chat_sessions').insertOne(chatSession);
    
    console.log(`üí¨ –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω: ${result.insertedId} –æ—Ç ${userId ? '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : guestName}`);
    console.log(`üìù –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${trimmedMessage}"`);
    
    res.status(201).json({
      ...chatSession,
      _id: result.insertedId.toString()
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç-—Å–µ—Å—Å–∏—é
app.get('/api/chat/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    const session = await db.collection('chat_sessions').findOne({ _id: new ObjectId(id) });
    
    if (!session) {
      return res.status(404).json({ error: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json({
      ...session,
      _id: session._id.toString()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
app.post('/api/chat/:id/message', async (req, res) => {
  try {
    const { id } = req.params;
    const { content } = req.body;
    const token = req.headers.authorization?.replace('Bearer ', '');
    
    console.log(`üîç –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${id}:`, {
      content,
      contentLength: content ? content.length : 0,
      hasToken: !!token
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
    if (!content || !content.trim()) {
      console.log('‚ùå –û—Ç–∫–ª–æ–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
    }
    
    let isAdmin = false;
    let author = '–ì–æ—Å—Ç—å';
    
    if (token) {
      try {
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
        if (user) {
          isAdmin = user.role === 'admin';
          author = user.name;
        }
      } catch (err) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞:', err.message);
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –≥–æ—Å—Ç–µ–π
      }
    }
    
    const trimmedContent = content.trim();
    
    const newMessage = {
      type: isAdmin ? 'admin' : 'user',
      content: trimmedContent,
      timestamp: new Date().toISOString(),
      author
    };
    
    console.log(`üìù –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:`, newMessage);
    
    await db.collection('chat_sessions').updateOne(
      { _id: new ObjectId(id) },
      { 
        $push: { messages: newMessage },
        $set: { 
          lastActivity: new Date().toISOString(),
          status: isAdmin ? 'active' : 'waiting'
        }
      }
    );
    
    const updatedSession = await db.collection('chat_sessions').findOne({ _id: new ObjectId(id) });
    
    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${id} –æ—Ç ${isAdmin ? '–∞–¥–º–∏–Ω–∞' : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}: "${trimmedContent}"`);
    
    res.json({
      ...updatedSession,
      _id: updatedSession._id.toString()
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({ error: error.message });
  }
});

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞
app.post('/api/chat/:id/survey', async (req, res) => {
  try {
    const { id } = req.params;
    const surveyData = req.body;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
    const chatSession = await db.collection('chat_sessions').findOne({ _id: new ObjectId(id) });
    if (!chatSession) {
      return res.status(404).json({ error: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø—Ä–æ—Å–∞
    await db.collection('chat_sessions').updateOne(
      { _id: new ObjectId(id) },
      { 
        $set: { 
          surveyCompleted: true,
          surveyData,
          lastActivity: new Date().toISOString(),
          status: 'closed' // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç –ø–æ—Å–ª–µ –æ–ø—Ä–æ—Å–∞
        }
      }
    );
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    const getSurveyEmoji = (rating) => {
      if (rating >= 4) return 'üòä';
      if (rating >= 3) return 'üòê';
      return 'üòû';
    };
    
    const getAverageRating = () => {
      const { satisfaction, helpfulness, recommendation } = surveyData;
      return Math.round((satisfaction + helpfulness + recommendation) / 3 * 10) / 10;
    };
    
    const averageRating = getAverageRating();
    const userName = chatSession.guestName || chatSession.userId || '–ì–æ—Å—Ç—å';
    
    let surveyMessage = `üìä **–û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ –û–¢ ${userName.toUpperCase()}**\n\n`;
    surveyMessage += `üéØ **–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${averageRating}/5** ${getSurveyEmoji(averageRating)}\n\n`;
    surveyMessage += `üìà **–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏:**\n`;
    surveyMessage += `‚Ä¢ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${surveyData.satisfaction}/5 ${getSurveyEmoji(surveyData.satisfaction)}\n`;
    surveyMessage += `‚Ä¢ –ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å: ${surveyData.helpfulness}/5 ${getSurveyEmoji(surveyData.helpfulness)}\n`;
    surveyMessage += `‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${surveyData.recommendation}/5 ${getSurveyEmoji(surveyData.recommendation)}\n`;
    
    if (surveyData.feedback && surveyData.feedback.trim()) {
      surveyMessage += `\nüí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:**\n"${surveyData.feedback.trim()}"`;
    }
    
    surveyMessage += `\n\nüìû **–ö–æ–Ω—Ç–∞–∫—Ç:** ${chatSession.guestEmail || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;
    surveyMessage += `\nüïí **–î–∞—Ç–∞:** ${new Date().toLocaleString('ru-RU')}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø—Ä–æ—Å–∞
    const surveySystemMessage = {
      type: 'system',
      content: surveyMessage,
      timestamp: new Date().toISOString(),
      author: '–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏',
      isRead: false
    };
    
    await db.collection('chat_sessions').updateOne(
      { _id: new ObjectId(id) },
      { 
        $push: { messages: surveySystemMessage }
      }
    );
    
    console.log(`üìä –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —á–∞—Ç–∞ ${id}:`, {
      userName,
      averageRating,
      satisfaction: surveyData.satisfaction,
      helpfulness: surveyData.helpfulness,
      recommendation: surveyData.recommendation,
      hasFeedback: !!surveyData.feedback
    });
    
    res.json({ 
      message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.',
      averageRating,
      chatClosed: true
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
app.get('/api/admin/chats', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    const chats = await db.collection('chat_sessions')
      .find({})
      .sort({ lastActivity: -1 })
      .toArray();
    
    res.json(chats.map(chat => ({
      ...chat,
      _id: chat._id.toString()
    })));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç
app.put('/api/admin/chats/:id/close', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    const { id } = req.params;
    
    await db.collection('chat_sessions').updateOne(
      { _id: new ObjectId(id) },
      { $set: { status: 'closed', lastActivity: new Date().toISOString() } }
    );
    
    res.json({ message: '–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç', 
    timestamp: new Date().toISOString(),
    endpoints: [
      'GET /api/health',
      'GET /api/admin/products', 
      'GET /api/admin/chats',
      'POST /api/chat'
    ]
  });
});

app.delete('/api/news/:id', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const { id } = req.params;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const news = await db.collection('news').findOne({ _id: new ObjectId(id) });
    if (!news) {
      return res.status(404).json({ error: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    // –£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å
    const result = await db.collection('news').deleteOne({ _id: new ObjectId(id) });
    
    if (result.deletedCount === 0) {
      return res.status(404).json({ error: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    console.log(`üóëÔ∏è –ù–æ–≤–æ—Å—Ç—å ${news.title} —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${currentUser.name}`);
    res.json({ message: '–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
app.put('/api/news/:id', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const currentUser = await db.collection('users').findOne({ _id: new ObjectId(decoded.userId) });
    
    if (!currentUser || currentUser.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const { id } = req.params;
    const { title, content, summary, imageUrl, published } = req.body;

    if (!title || !content) {
      return res.status(400).json({ error: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const updateData = {
      title,
      content,
      summary: summary || content.substring(0, 200) + '...',
      imageUrl: imageUrl || '/placeholder-news.jpg',
      published,
      updatedAt: new Date()
    };
    
    const result = await db.collection('news').updateOne(
      { _id: new ObjectId(id) },
      { $set: updateData }
    );

    if (result.matchedCount === 0) {
      return res.status(404).json({ error: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    const updatedNews = await db.collection('news').findOne({ _id: new ObjectId(id) });
    res.json(updatedNews);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –Ω–æ–≤–æ—Å—Ç—è–º
app.get('/api/news/:newsId/comments', async (req, res) => {
  try {
    const { newsId } = req.params;
    
    const comments = await db.collection('comments').find({
      newsId: newsId,
      isApproved: true
    }).sort({ createdAt: -1 }).toArray();
    
    res.json(comments.map(comment => ({
      ...comment,
      _id: comment._id.toString()
    })));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/news/:id', async (req, res) => {
  try {
    const { id } = req.params;
    if (!ObjectId.isValid(id)) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –Ω–æ–≤–æ—Å—Ç–∏' });
    }
    const news = await db.collection('news').findOne({ _id: new ObjectId(id) });
    if (!news) {
      return res.status(404).json({ error: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    res.json({
      ...news,
      _id: news._id.toString()
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
app.get('/api/product-categories', async (req, res) => {
  try {
    const categories = await db.collection('productcategories').find({}).sort({ name: 1 }).toArray();
    
    res.json(categories.map(category => ({
      _id: category._id.toString(),
      name: category.name,
      description: category.description,
      slug: category.slug,
      createdAt: category.createdAt
    })));
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ü–û–°–õ–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
async function run() {
  try {
    await client.connect();
    db = client.db("tech-site-craft");
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    
    const http = require('http');
    const server = http.createServer(app);
    const initWebSocket = require('./ws');
    
    initWebSocket(server, db);

    server.listen(PORT, () => {
      console.log(`üöÄ API server and WebSocket running on http://localhost:${PORT}`);
    });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", err);
    process.exit(1);
  }
}

// –í—ã–∑—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞
run().catch(console.dir);