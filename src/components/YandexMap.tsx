import React, { useEffect, useRef } from 'react';
import { MapPin } from 'lucide-react';
import { MAPS_CONFIG } from '../config/maps';

declare global {
  interface Window {
    ymaps: any;
  }
}

interface YandexMapProps {
  apiKey?: string;
  center?: [number, number];
  zoom?: number;
  address?: string;
  organizationName?: string;
  className?: string;
}

const YandexMap: React.FC<YandexMapProps> = ({
  apiKey = MAPS_CONFIG.yandex.apiKey,
  center = MAPS_CONFIG.organization.coordinates,
  zoom = MAPS_CONFIG.yandex.defaultZoom,
  address = MAPS_CONFIG.organization.address,
  organizationName = MAPS_CONFIG.organization.name,
  className = "w-full h-64 rounded-lg"
}) => {
  const mapRef = useRef<HTMLDivElement>(null);
  const mapInstanceRef = useRef<any>(null);
  const [isLoading, setIsLoading] = React.useState(true);
  const [hasError, setHasError] = React.useState(false);

  // –ï—Å–ª–∏ API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
  if (!apiKey || apiKey === '–ó–ê–ú–ï–ù–ò–¢–ï_–ù–ê_–ù–û–í–´–ô_–ö–õ–Æ–ß') {
    return (
      <div className={`${className} bg-gradient-to-br from-gray-50 to-gray-100 border border-gray-200 rounded-lg p-8 text-center`}>
        <div className="mb-4">
          <MapPin className="mx-auto h-12 w-12 text-gray-400" />
        </div>
        <h3 className="text-lg font-semibold text-gray-700 mb-2">
          –ö–∞—Ä—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        </h3>
        <p className="text-gray-600 mb-4">
          –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç
        </p>
        <div className="bg-white rounded-lg p-4 mb-4 text-left">
          <div className="space-y-2 text-sm text-gray-600">
            <p><strong>üìç –ê–¥—Ä–µ—Å:</strong> {MAPS_CONFIG.organization.address}</p>
            <p><strong>üöá –ú–µ—Ç—Ä–æ:</strong> {MAPS_CONFIG.organization.metro} ({MAPS_CONFIG.organization.walkingTime})</p>
            <p><strong>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</strong> {MAPS_CONFIG.organization.phone}</p>
            <p><strong>üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</strong> {MAPS_CONFIG.organization.workingHours}</p>
          </div>
        </div>
        <div className="flex flex-wrap gap-2 justify-center">
          <a
            href={MAPS_CONFIG.externalMaps.yandex(MAPS_CONFIG.organization.address)}
            target="_blank"
            rel="noopener noreferrer"
            className="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors text-sm font-medium"
          >
            –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã
          </a>
          <a
            href={MAPS_CONFIG.externalMaps.google(MAPS_CONFIG.organization.address)}
            target="_blank"
            rel="noopener noreferrer"
            className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors text-sm font-medium"
          >
            Google Maps
          </a>
          <a
            href={MAPS_CONFIG.externalMaps.gis2(MAPS_CONFIG.organization.address)}
            target="_blank"
            rel="noopener noreferrer"
            className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-colors text-sm font-medium"
          >
            2–ì–ò–°
          </a>
        </div>
      </div>
    );
  }

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ API –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç
    if (window.ymaps) {
      initializeMap();
    } else {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º API –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
      loadYandexMapsAPI();
    }

    return () => {
      // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      if (mapInstanceRef.current) {
        mapInstanceRef.current.destroy();
      }
    };
  }, []);

  const loadYandexMapsAPI = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Å–∫—Ä–∏–ø—Ç
    if (document.querySelector('script[src*="api-maps.yandex.ru"]')) {
      return;
    }

    const script = document.createElement('script');
    script.src = `https://api-maps.yandex.ru/2.1/?apikey=${apiKey}&lang=ru_RU`;
    script.async = true;
    script.onload = () => {
      window.ymaps.ready(initializeMap);
    };
    script.onerror = () => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç API');
      setHasError(true);
      setIsLoading(false);
    };
    document.head.appendChild(script);
  };

  const initializeMap = () => {
    if (!mapRef.current || !window.ymaps) return;

    try {
      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
      const map = new window.ymaps.Map(mapRef.current, {
        center: center,
        zoom: zoom,
        controls: ['zoomControl', 'routeButtonControl', 'typeSelector', 'fullscreenControl']
      });

      // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É (–º–∞—Ä–∫–µ—Ä)
      const placemark = new window.ymaps.Placemark(center, {
        balloonContent: `
          <div style="padding: 10px;">
            <h3 style="margin: 0 0 8px 0; color: #333;">${organizationName}</h3>
            <p style="margin: 0 0 8px 0; color: #666;">${address}</p>
            <div style="margin: 8px 0;">
                           <strong>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${MAPS_CONFIG.organization.phone}<br>
               <strong>üìß Email:</strong> ${MAPS_CONFIG.organization.email}<br>
               <strong>üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</strong> ${MAPS_CONFIG.organization.workingHours}
            </div>
          </div>
        `,
        hintContent: organizationName
      }, {
        preset: 'islands#redDotIcon',
        iconColor: '#dc2626'
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –Ω–∞ –∫–∞—Ä—Ç—É
      map.geoObjects.add(placemark);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
      map.behaviors.enable('scrollZoom');

      mapInstanceRef.current = map;
      setIsLoading(false);

      // –ü—ã—Ç–∞–µ–º—Å—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      if (address) {
        window.ymaps.geocode(address, {
          results: 1
        }).then((result: any) => {
          const firstGeoObject = result.geoObjects.get(0);
          if (firstGeoObject) {
            const coords = firstGeoObject.geometry.getCoordinates();
            map.setCenter(coords, zoom);
            placemark.geometry.setCoordinates(coords);
          }
        }).catch((error: any) => {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É:', error);
        });
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);
      setHasError(true);
      setIsLoading(false);
    }
  };

  // Fallback –¥–ª—è —Å–ª—É—á–∞—è –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  if (hasError) {
    return (
      <div className={`${className} bg-gray-100 border-2 border-dashed border-gray-300 flex flex-col items-center justify-center text-gray-500`}>
        <MapPin size={48} className="mb-3 text-gray-400" />
        <h4 className="font-semibold mb-2">–ö–∞—Ä—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</h4>
        <p className="text-sm text-center mb-4">{address}</p>
        <div className="flex gap-2">
          <button
            onClick={() => {
              const encodedAddress = encodeURIComponent(address);
              window.open(`https://yandex.ru/maps/?text=${encodedAddress}&z=15`, '_blank');
            }}
            className="bg-red-500 hover:bg-red-600 text-white px-3 py-2 rounded text-sm transition-colors"
          >
            –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã
          </button>
          <button
            onClick={() => {
              const encodedAddress = encodeURIComponent(address);
              window.open(`https://www.google.com/maps/search/${encodedAddress}`, '_blank');
            }}
            className="bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded text-sm transition-colors"
          >
            Google Maps
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="relative">
      <div 
        ref={mapRef} 
        className={className}
        style={{ minHeight: '256px' }}
      >
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {isLoading && (
          <div className="absolute inset-0 bg-gray-100 flex items-center justify-center z-20 rounded-lg">
            <div className="text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2"></div>
              <p className="text-gray-600 text-sm">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</p>
            </div>
          </div>
        )}
      </div>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–¥ –∫–∞—Ä—Ç–æ–π */}
      {!isLoading && (
        <div className="absolute top-2 left-2 bg-white bg-opacity-90 backdrop-blur-sm rounded-lg p-3 shadow-lg z-10 max-w-xs">
          <h4 className="font-semibold text-sm text-gray-800 mb-1">üìç {organizationName}</h4>
          <p className="text-xs text-gray-600">{address}</p>
          <div className="mt-2 text-xs text-gray-500">
            <p>üöá –º. {MAPS_CONFIG.organization.metro} ({MAPS_CONFIG.organization.walkingTime})</p>
          </div>
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ */}
      {!isLoading && (
        <div className="absolute bottom-2 right-2 z-10">
          <button
            onClick={() => {
              const encodedAddress = encodeURIComponent(address);
              window.open(`https://yandex.ru/maps/?text=${encodedAddress}&z=15`, '_blank');
            }}
            className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-lg shadow-lg text-sm font-medium transition-colors"
          >
            üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç
          </button>
        </div>
      )}
    </div>
  );
};

export default YandexMap; 