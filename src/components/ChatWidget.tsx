import React, { useState, useEffect, useRef } from 'react';
import { MessageCircle, X, Send, User, Bot, Phone, Mail, MessageSquare, Clock, CheckCircle, ChevronUp, Minus, Star, Package, Percent, Truck, Settings, Zap, Check, XCircle } from 'lucide-react';
import { useAuth } from '../hooks/useAuth';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Textarea } from './ui/textarea';
import { Badge } from './ui/badge';
import { toast } from 'sonner';
import io from 'socket.io-client';

interface ChatMessage {
  _id?: string;
  type: 'user' | 'admin' | 'system';
  content: string;
  timestamp: string;
  author?: string;
  isRead?: boolean;
}

interface ChatSession {
  _id?: string;
  userId?: string;
  guestName?: string;
  guestEmail?: string;
  status: 'active' | 'closed' | 'waiting';
  messages: ChatMessage[];
  createdAt: string;
  lastActivity: string;
  surveyCompleted?: boolean;
  surveyData?: {
    satisfaction: number;
    helpfulness: number;
    recommendation: number;
    feedback?: string;
  };
}

const SURVEY_QUESTIONS = [
  { id: 'satisfaction', question: '–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', emoji: 'üòä' },
  { id: 'helpfulness', question: '–ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω–æ–π –±—ã–ª–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è?', emoji: 'ü§ù' },
  { id: 'recommendation', question: '–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –ª–∏ BT-Tech –¥—Ä—É–∑—å—è–º?', emoji: 'üë•' }
];

const POPULAR_QUESTIONS = [
  { icon: Percent, title: "–°–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏", description: "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", message: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—Ç–µ–ª –±—ã —É–∑–Ω–∞—Ç—å –æ —Ç–µ–∫—É—â–∏—Ö —Å–∫–∏–¥–∫–∞—Ö –∏ –∞–∫—Ü–∏—è—Ö. –ö–∞–∫–∏–µ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–µ–π—á–∞—Å –¥–µ–π—Å—Ç–≤—É—é—Ç?" },
  { icon: Truck, title: "–î–æ—Å—Ç–∞–≤–∫–∞", description: "–£—Å–ª–æ–≤–∏—è –∏ —Å—Ä–æ–∫–∏", message: "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ - —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Å—Ä–æ–∫–∏ –∏ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏?" },
  { icon: Settings, title: "–ì–∞—Ä–∞–Ω—Ç–∏—è", description: "–°–µ—Ä–≤–∏—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", message: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª–æ–≤–∏—è—Ö —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è." },
  { icon: Package, title: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", description: "–ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ", message: "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –∏ –Ω–∞–ª–∏—á–∏—é?" }
];

const CONTACT_CATEGORIES = [
  { icon: Percent, text: "–¶–µ–Ω—ã –∏ —Å–∫–∏–¥–∫–∏", value: "–•–æ—á—É —É–∑–Ω–∞—Ç—å –æ —Ü–µ–Ω–∞—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö –Ω–∞ —Ç–æ–≤–∞—Ä—ã", color: "from-green-50 to-green-100 border-green-200 text-green-700" },
  { icon: Truck, text: "–î–æ—Å—Ç–∞–≤–∫–∞", value: "–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —É—Å–ª–æ–≤–∏—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏", color: "from-blue-50 to-blue-100 border-blue-200 text-blue-700" },
  { icon: Settings, text: "–ì–∞—Ä–∞–Ω—Ç–∏—è –∏ —Å–µ—Ä–≤–∏—Å", value: "–í–æ–ø—Ä–æ—Å –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é", color: "from-purple-50 to-purple-100 border-purple-200 text-purple-700" },
  { icon: MessageSquare, text: "–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", value: "–£ –º–µ–Ω—è –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", color: "from-gray-50 to-gray-100 border-gray-200 text-gray-700" }
];

const ChatWidget = () => {
  const [isOpen, setIsOpen] = useState(() => JSON.parse(localStorage.getItem('chatWidget_isOpen') || 'false'));
  const [isMinimized, setIsMinimized] = useState(false);
  const [step, setStep] = useState<'welcome' | 'contact' | 'chat' | 'survey'>('welcome');
  const [messages, setMessages] = useState<ChatMessage[]>(() => JSON.parse(localStorage.getItem('chatWidget_messages') || '[]'));
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const [sessionId, setSessionId] = useState<string | null>(() => localStorage.getItem('chatWidget_sessionId'));
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const chatMessagesRef = useRef<HTMLDivElement>(null);
  const { user } = useAuth();
  
  const [shouldAutoScroll, setShouldAutoScroll] = useState(true);
  const [scrollPosition, setScrollPosition] = useState(0);
  
  const [contactForm, setContactForm] = useState({
    name: user?.profile?.firstName || '',
    email: user?.email || '',
    message: '',
    category: 'general'
  });
  const [surveyData, setSurveyData] = useState({ satisfaction: 0, helpfulness: 0, recommendation: 0, feedback: '' });
  const [currentSurveyQuestion, setCurrentSurveyQuestion] = useState(0);
  const [hasNewMessages, setHasNewMessages] = useState(false);
  const [newMessagesCount, setNewMessagesCount] = useState(0);
  const [apiStatus, setApiStatus] = useState<'connected' | 'disconnected' | 'checking'>('checking');
  const socketRef = useRef<ReturnType<typeof io> | null>(null);

  useEffect(() => {
    localStorage.setItem('chatWidget_isOpen', JSON.stringify(isOpen));
  }, [isOpen]);

  useEffect(() => {
    localStorage.setItem('chatWidget_step', JSON.stringify(step));
  }, [step]);

  useEffect(() => {
    localStorage.setItem('chatWidget_messages', JSON.stringify(messages));
  }, [messages]);

  useEffect(() => {
    if (sessionId) {
      localStorage.setItem('chatWidget_sessionId', sessionId);
    } else {
      localStorage.removeItem('chatWidget_sessionId');
    }
  }, [sessionId]);

  useEffect(() => {
    localStorage.setItem('chatWidget_contactForm', JSON.stringify(contactForm));
  }, [contactForm]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  useEffect(() => {
    const checkApiStatus = async () => {
      try {
        const response = await fetch('http://localhost:3001/api/health');
        if (response.ok) {
          setApiStatus('connected');
        } else {
          setApiStatus('disconnected');
        }
      } catch (error) {
        setApiStatus('disconnected');
      }
    };

    checkApiStatus();
    const interval = setInterval(checkApiStatus, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    return () => clearInterval(interval);
  }, []);

  // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  useEffect(() => {
    if (user) {
      setContactForm(prev => ({
        ...prev,
        name: user.profile?.firstName && user.profile?.lastName 
          ? `${user.profile.firstName} ${user.profile.lastName}`
          : user.name || prev.name,
        email: user.email || prev.email
      }));
    }
  }, [user]);

  // –£–º–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
  const scrollToBottom = () => {
    if (shouldAutoScroll) {
      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–∏–∑—É —á–∞—Ç–∞
  const checkIfAtBottom = () => {
    if (chatMessagesRef.current) {
      const { scrollTop, scrollHeight, clientHeight } = chatMessagesRef.current;
      const isAtBottom = scrollTop + clientHeight >= scrollHeight - 50; // 50px –±—É—Ñ–µ—Ä
      setShouldAutoScroll(isAtBottom);
      setScrollPosition(scrollTop);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
  const saveScrollPosition = () => {
    if (chatMessagesRef.current && !shouldAutoScroll) {
      setScrollPosition(chatMessagesRef.current.scrollTop);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞
  const restoreScrollPosition = () => {
    if (chatMessagesRef.current && !shouldAutoScroll) {
      setTimeout(() => {
        if (chatMessagesRef.current) {
          chatMessagesRef.current.scrollTop = scrollPosition;
        }
      }, 50);
    }
  };

  useEffect(() => {
    // –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (shouldAutoScroll) {
      scrollToBottom();
    } else {
      restoreScrollPosition();
    }
  }, [messages, shouldAutoScroll]);

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    const restoreSession = async () => {
      if (sessionId && messages.length === 0) {
        try {
          const response = await fetch(`http://localhost:3001/api/chat/${sessionId}`, {
            headers: user ? {
              'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
            } : {}
          });
          
          if (response.ok) {
            const session = await response.json();
            setMessages(session.messages);
            setStep('chat');
            socketRef.current?.emit('joinSession', { sessionId, token: localStorage.getItem('auth_token') });
          } else {
            // –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—á–∏—â–∞–µ–º
            setSessionId(null);
            setStep('welcome');
            localStorage.removeItem('chatWidget_sessionId');
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        }
      }
    };

    restoreSession();
  }, [sessionId, user]);

  useEffect(() => {
    const socket = io('http://localhost:3001/chat');
    socketRef.current = socket;
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Å–µ—Å—Å–∏–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å sessionId
    if (sessionId) {
      console.log('üîå –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Å–µ—Å—Å–∏–∏:', sessionId);
      socket.emit('joinSession', { sessionId, token: localStorage.getItem('auth_token') });
    }
    
    socket.on('connect', () => {
      console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–µ
      if (sessionId) {
        socket.emit('joinSession', { sessionId, token: localStorage.getItem('auth_token') });
      }
    });
    
    socket.on('newMessage', ({ sessionId: msgSessionId, message }) => {
      console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', { msgSessionId, message });
      if (msgSessionId === sessionId) {
        setMessages(prev => [...prev, message]);
        if (message.type === 'admin') {
          setHasNewMessages(true);
          if (!isOpen || isMinimized) {
            setNewMessagesCount(prev => prev + 1);
            toast.info('üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏');
          }
        }
      }
    });
    
    socket.on('disconnect', () => {
      console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
    });
    
    return () => { 
      socket.disconnect(); 
    };
  }, [sessionId, isOpen, isMinimized]);

  const handleContactSubmit = async () => {
    if (!contactForm.name.trim() || !contactForm.email.trim() || !contactForm.message.trim()) {
      toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    if (apiStatus === 'disconnected') {
      toast.error('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (495) 123-45-67');
      return;
    }

    setLoading(true);
    try {
      const requestBody = {
        guestName: contactForm.name,
        guestEmail: contactForm.email,
        message: contactForm.message
      };

      const headers: Record<string, string> = {
        'Content-Type': 'application/json'
      };
      
      if (user) {
        headers['Authorization'] = `Bearer ${localStorage.getItem('auth_token')}`;
      }

      const response = await fetch('http://localhost:3001/api/chat/start', {
        method: 'POST',
        headers,
        body: JSON.stringify(requestBody)
      });

              if (response.ok) {
          const session = await response.json();
          setSessionId(session._id);
          socketRef.current?.emit('joinSession', { sessionId: session._id, token: localStorage.getItem('auth_token') });
          setMessages(session.messages);
          setStep('chat');
          setHasNewMessages(false);
          setNewMessagesCount(0);
          toast.success('–ß–∞—Ç —Å–æ–∑–¥–∞–Ω! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç');
          
          console.log('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω, –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ API');
      } else {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
    } finally {
      setLoading(false);
    }
  };

  const sendMessage = async (messageText?: string) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ü–ï–†–ï–î –ª—é–±—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const messageContent = messageText ? messageText.trim() : newMessage.trim();
    
    console.log('üîç sendMessage –≤—ã–∑–≤–∞–Ω:', {
      messageText,
      newMessage,
      messageContent,
      sessionId
    });

    if (!messageContent || !sessionId) {
      console.log('‚ùå –û—Ç–º–µ–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç sessionId');
      return;
    }

    if (apiStatus === 'disconnected') {
      toast.error('‚ö†Ô∏è –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
    const tempMessage: ChatMessage = {
      type: 'user',
      content: messageContent,
      timestamp: new Date().toISOString()
    };

    console.log('üìù –°–æ–∑–¥–∞–µ–º tempMessage:', tempMessage);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UI
    setMessages(prev => [...prev, tempMessage]);
    
    // –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
    setShouldAutoScroll(true);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
    if (!messageText) {
      console.log('üßπ –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞');
      setNewMessage('');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
    socketRef.current?.emit('sendMessage', { sessionId, content: messageContent, token: localStorage.getItem('auth_token') });
  };

  const submitSurvey = async () => {
    if (!sessionId) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if (surveyData.satisfaction === 0 || surveyData.helpfulness === 0 || surveyData.recommendation === 0) {
      toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º');
      return;
    }

    if (apiStatus === 'disconnected') {
      toast.error('‚ö†Ô∏è –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
      return;
    }

    try {
      const response = await fetch(`http://localhost:3001/api/chat/${sessionId}/survey`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...(user ? { 'Authorization': `Bearer ${localStorage.getItem('auth_token')}` } : {})
        },
        body: JSON.stringify(surveyData)
      });

      if (response.ok) {
        const result = await response.json();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        toast.success(`${result.message} –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: ${result.averageRating}/5 ‚≠ê`);
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
        setSessionId(null);
        setMessages([]);
        setStep('welcome');
        setContactForm({
          name: user?.profile?.firstName || '',
          email: user?.email || '',
          message: '',
          category: 'general'
        });
        setSurveyData({
          satisfaction: 0,
          helpfulness: 0,
          recommendation: 0,
          feedback: ''
        });
        localStorage.removeItem('chatWidget_sessionId');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        setTimeout(() => {
          closeWidget();
        }, 3000);
        
        console.log('‚úÖ –û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —á–∞—Ç –∑–∞–∫—Ä—ã—Ç, –æ—Ü–µ–Ω–∫–∞:', result.averageRating);
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤');
    }
  };

  const openWidget = () => {
    console.log('üîì –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏');
    setIsOpen(true);
    setIsMinimized(false);
    setHasNewMessages(false);
    setNewMessagesCount(0);
  };

  const closeWidget = async () => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
    if (sessionId && step === 'chat') {
      const systemMessage = {
        type: 'system',
        content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç',
        timestamp: new Date().toISOString()
      };
      
      socketRef.current?.emit('sendMessage', { 
        sessionId, 
        content: systemMessage.content,
        token: localStorage.getItem('auth_token')
      });
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      try {
        const token = localStorage.getItem('auth_token');
        await fetch(`http://localhost:3001/api/admin/chats/${sessionId}/close`, {
          method: 'PUT',
          headers: token ? { 'Authorization': `Bearer ${token}` } : {},
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞:', error);
      }
    }
    
    setIsOpen(false);
    setIsMinimized(false);
  };

  const minimizeWidget = () => {
    setIsMinimized(true);
  };

  const maximizeWidget = () => {
    console.log('üìà –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏');
    setIsMinimized(false);
    setHasNewMessages(false);
    setNewMessagesCount(0);
  };

  const clearChat = () => {
    setMessages([]);
    setSessionId(null);
    setStep('welcome');
    setContactForm({
      name: user?.name || '',
      email: user?.email || '',
      message: '',
      category: 'general'
    });
    localStorage.removeItem('chatWidget_sessionId');
    toast.info('–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç');
  };
  
  const endChat = async () => {
    if (!sessionId) return;
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–∞—Ç–∞
      const systemMessage = {
        type: 'system',
        content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!',
        timestamp: new Date().toISOString()
      };
      
      socketRef.current?.emit('sendMessage', { 
        sessionId, 
        content: systemMessage.content,
        token: localStorage.getItem('auth_token')
      });
      
      toast.success('–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø—Ä–æ—Å—É
      goToSurvey();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç');
    }
  };

  const goToSurvey = () => {
    setStep('survey');
    setCurrentSurveyQuestion(0);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è markdown –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
  const formatMessage = (content: string, isUserMessage: boolean = false) => {
    // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º markdown —Å—Å—ã–ª–∫–∏ [—Ç–µ–∫—Å—Ç](url)
    let processedContent = content.replace(/\[([^\]]+)\]\(([^)]+)\)/g, (match, text, url) => {
      // –£–±–∏—Ä–∞–µ–º markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏
      const cleanText = text.replace(/\*\*/g, '');
      return `<LINK>${cleanText}|${url}</LINK>`;
    });

    // –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–∏—Ä–Ω—ã–π –∏ –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç
    const parts = processedContent.split(/(\*\*.*?\*\*|~~.*?~~|<LINK>.*?<\/LINK>)/g);
    
    return parts.map((part, index) => {
      if (part.startsWith('<LINK>') && part.endsWith('</LINK>')) {
        const linkContent = part.slice(6, -7); // —É–±–∏—Ä–∞–µ–º <LINK> –∏ </LINK>
        const [text, url] = linkContent.split('|');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å—Å—ã–ª–∫–∏
        const hasDiscountInfo = text.includes('üî•') || text.includes('(-') || text.includes('%');
        const hasLowStock = text.includes('‚ö°') || text.includes('–æ—Å—Ç–∞–ª–æ—Å—å');
        const isOutOfStock = text.includes('‚ùå') || text.includes('–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞
        let linkClassName = "inline-flex items-center gap-1 hover:underline font-semibold transition-all duration-200 px-2 py-1 rounded-md";
        
        if (isUserMessage) {
          if (isOutOfStock) {
            linkClassName += " text-gray-300 hover:text-gray-200 hover:bg-white/10 cursor-not-allowed opacity-70";
          } else if (hasDiscountInfo) {
            linkClassName += " text-yellow-200 hover:text-yellow-100 hover:bg-white/20 shadow-sm";
          } else if (hasLowStock) {
            linkClassName += " text-orange-200 hover:text-orange-100 hover:bg-white/20 shadow-sm";
          } else {
            linkClassName += " text-white hover:text-yellow-200 hover:bg-white/20";
          }
        } else {
          if (isOutOfStock) {
            linkClassName += " text-gray-500 hover:text-gray-700 hover:bg-gray-50 cursor-not-allowed opacity-70";
          } else if (hasDiscountInfo) {
            linkClassName += " text-red-600 hover:text-red-800 hover:bg-red-50 shadow-sm";
          } else if (hasLowStock) {
            linkClassName += " text-orange-600 hover:text-orange-800 hover:bg-orange-50 shadow-sm";
          } else {
            linkClassName += " text-gray-700 hover:text-gray-900 hover:bg-gray-100";
          }
        }
        
        return (
          <a 
            key={index}
            href={url}
            target="_blank"
            rel="noopener noreferrer"
            className={linkClassName}
            onClick={(e) => e.stopPropagation()}
            title={`–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É: ${text.replace(/üõçÔ∏è|üî•|üéâ|‚ö°|‚ùå/g, '').trim()}`}
          >
            <span>{text}</span>
          </a>
        );
      }
      
      if (part.startsWith('**') && part.endsWith('**')) {
        const boldText = part.slice(2, -2);
        return <strong key={index}>{formatTextWithLinks(boldText, isUserMessage)}</strong>;
      }
      
      if (part.startsWith('~~') && part.endsWith('~~')) {
        const strikeText = part.slice(2, -2);
        return <del key={index}>{formatTextWithLinks(strikeText, isUserMessage)}</del>;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ —Å—Å—ã–ª–∫–∏ –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
      const lines = part.split('\n');
      return lines.map((line, lineIndex) => (
        <span key={`line-${index}-${lineIndex}`}>
          {lineIndex > 0 && <br />}
          {formatTextWithLinks(line, isUserMessage)}
        </span>
      ));
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
  const formatTextWithLinks = (text: string, isUserMessage: boolean = false) => {
    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ URL
    const urlRegex = /(https?:\/\/[^\s<>"{}|\\^`\[\]]+|www\.[^\s<>"{}|\\^`\[\]]+)/g;
    const parts = text.split(urlRegex);
    
    return parts.map((part, index) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –∑–∞–Ω–æ–≤–æ (split –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫)
      if (urlRegex.test(part)) {
        // –≠—Ç–æ —Å—Å—ã–ª–∫–∞ - –¥–µ–ª–∞–µ–º –µ—ë –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
        const href = part.startsWith('www.') ? `https://${part}` : part;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        const linkClassName = isUserMessage 
          ? "inline-flex items-center gap-1 hover:underline font-semibold transition-all duration-200 px-2 py-1 rounded-md text-white hover:text-yellow-200 hover:bg-white/20" 
          : "inline-flex items-center gap-1 hover:underline font-semibold transition-all duration-200 px-2 py-1 rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-100";
        
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Å—Å—ã–ª–∫—É —Å –∏–∫–æ–Ω–∫–æ–π
        return (
          <a 
            key={index}
            href={href}
            target="_blank"
            rel="noopener noreferrer"
            className={linkClassName}
            onClick={(e) => {
              // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
              e.stopPropagation();
              console.log('üîó –ö–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ:', href);
            }}
            title={`–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ: ${href}`}
          >
            <span>üîó</span>
            <span>{part}</span>
          </a>
        );
      }
      // –≠—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
      return part;
    });
  };

  const formatTime = (timestamp: string) => {
    return new Date(timestamp).toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const handleQuickQuestion = async (questionMessage: string) => {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º —á–∞—Ç —Å—Ä–∞–∑—É
    if (user) {
      setLoading(true);
      try {
        const requestBody = {
          message: questionMessage
        };

        const headers: Record<string, string> = {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        };

        const response = await fetch('http://localhost:3001/api/chat/start', {
          method: 'POST',
          headers,
          body: JSON.stringify(requestBody)
        });

        if (response.ok) {
          const session = await response.json();
          setSessionId(session._id);
          socketRef.current?.emit('joinSession', { sessionId: session._id, token: localStorage.getItem('auth_token') });
          setMessages(session.messages);
          setStep('chat');
          setHasNewMessages(false);
          setNewMessagesCount(0);
          setShouldAutoScroll(true); // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
          toast.success('–ß–∞—Ç —Å–æ–∑–¥–∞–Ω! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç');
        } else {
          throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç');
      } finally {
        setLoading(false);
      }
    } else {
      // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–µ —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      setContactForm(prev => ({ ...prev, message: questionMessage }));
      setStep('contact');
    }
  };

  return (
    <>
      {/* –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ */}
      {!isOpen && (
        <button
          onClick={openWidget}
          className="fixed bottom-4 left-4 md:bottom-6 md:left-6 w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 text-white rounded-full shadow-xl hover:shadow-2xl hover:scale-105 transition-all duration-300 flex items-center justify-center z-50 group"
        >
          <MessageCircle className="w-8 h-8" />
          {newMessagesCount > 0 && (
            <Badge className="absolute -top-1 -right-1 bg-gradient-to-r from-red-500 to-red-600 text-white border-0 shadow-lg animate-pulse">
              {newMessagesCount > 9 ? '9+' : newMessagesCount}
            </Badge>
          )}
        </button>
      )}

      {/* –û–∫–Ω–æ —á–∞—Ç–∞ */}
      {isOpen && (
        <div className="fixed bottom-4 left-4 right-4 md:bottom-6 md:left-6 md:right-auto z-50 shadow-2xl rounded-xl overflow-hidden border border-gray-200 backdrop-blur-sm bg-white/80">
          <div className={`transition-all duration-300 flex flex-col ${isMinimized ? 'w-80 h-16 overflow-hidden' : 'w-full md:w-[420px] h-[70vh] max-h-[70vh]'}`}>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="bg-gradient-to-r from-blue-50 via-indigo-50 to-purple-50 border-b border-gray-200 p-4 flex justify-between items-center cursor-pointer"
                 onClick={isMinimized ? maximizeWidget : undefined}>
              <div className="flex items-center space-x-3">
                <div className="relative">
                  <div className={`w-3 h-3 rounded-full shadow-sm ${
                    apiStatus === 'connected' ? 'bg-gradient-to-r from-green-400 to-green-500' :
                    apiStatus === 'disconnected' ? 'bg-gradient-to-r from-red-400 to-red-500' :
                    'bg-gradient-to-r from-yellow-400 to-yellow-500 animate-pulse'
                  }`} title={
                    apiStatus === 'connected' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É' :
                    apiStatus === 'disconnected' ? '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º' :
                    '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...'
                  }></div>
                  {apiStatus === 'connected' && (
                    <div className="absolute -bottom-1 -right-1 w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                  )}
                </div>
                <div>
                  <span className="font-semibold text-gray-900">
                    {step === 'welcome' ? '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ BT-Tech' : 
                     step === 'contact' ? '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏' :
                     step === 'chat' ? '–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π' : 
                     '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'}
                  </span>
                  {step === 'chat' && sessionId && (
                    <p className="text-xs text-gray-600">–û–Ω–ª–∞–π–Ω ‚Ä¢ –û—Ç–≤–µ—á–∞–µ–º –±—ã—Å—Ç—Ä–æ</p>
                  )}
                </div>
                {newMessagesCount > 0 && (
                  <Badge className="bg-gradient-to-r from-red-500 to-red-600 text-white border-0 shadow-sm animate-pulse">
                    {newMessagesCount > 99 ? '99+' : newMessagesCount}
                  </Badge>
                )}
              </div>
              <div className="flex items-center space-x-1">
                {step === 'chat' && sessionId && (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={clearChat}
                    title="–ù–æ–≤—ã–π —á–∞—Ç"
                    className="h-8 w-8 p-0 hover:bg-blue-100"
                  >
                    <MessageCircle className="w-4 h-4" />
                  </Button>
                )}
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={isMinimized ? maximizeWidget : minimizeWidget}
                  title={isMinimized ? "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å" : "–°–≤–µ—Ä–Ω—É—Ç—å"}
                  className="h-8 w-8 p-0 hover:bg-blue-100"
                >
                  {isMinimized ? <ChevronUp className="w-4 h-4" /> : <Minus className="w-4 h-4" />}
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={closeWidget}
                  title="–ó–∞–∫—Ä—ã—Ç—å"
                  className="h-8 w-8 p-0 hover:bg-red-100"
                >
                  <X className="w-4 h-4" />
                </Button>
              </div>
            </div>

            {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
            {!isMinimized && (
            <div className="flex-1 overflow-y-auto flex flex-col min-h-0">
              {step === 'welcome' && (
                <div className="p-6 space-y-6 bg-gradient-to-br from-gray-50/50 to-blue-50/30">
                  {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ */}
                  <div className="text-center space-y-2">
                    <div className="w-16 h-16 bg-gradient-to-br from-blue-100 to-purple-100 rounded-2xl mx-auto flex items-center justify-center shadow-lg">
                        <MessageCircle className="w-8 h-8 text-blue-600" />
                    </div>
                    <div>
                        <h3 className="text-xl font-bold text-gray-900">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h3>
                        <p className="text-gray-600 text-sm">–ì–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º</p>
                    </div>
                  </div>

                  {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
                  <div className="space-y-4">
                    <Button onClick={() => setStep('contact')} size="lg" className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:shadow-lg transition-shadow">
                        <Zap className="mr-2"/>–ù–∞—á–∞—Ç—å —á–∞—Ç
                    </Button>
                    <div className="grid grid-cols-2 gap-3">
                         <Button variant="outline" asChild><a href="tel:+74951234567"><Phone className="mr-2"/>–ü–æ–∑–≤–æ–Ω–∏—Ç—å</a></Button>
                         <Button variant="outline" asChild><a href="mailto:support@bt-tech.ru"><Mail className="mr-2"/>Email</a></Button>
                    </div>
                  </div>

                  {/* –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã */}
                  <div className="bg-white/70 rounded-xl p-4 shadow-sm border border-gray-200/50">
                    <h4 className="font-semibold text-gray-800 mb-3 flex items-center"><Star className="w-4 h-4 mr-2 text-yellow-400 fill-yellow-400"/>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h4>
                    <div className="grid grid-cols-2 gap-3">
                        {POPULAR_QUESTIONS.map((q, i) => <Button key={i} variant="outline" className="h-auto text-left flex flex-col items-start p-3 bg-gradient-to-br from-gray-50 to-gray-100 hover:from-blue-50 hover:to-blue-100 transition-all duration-300" onClick={() => handleQuickQuestion(q.message)}><q.icon className="w-5 h-5 mb-2 text-gray-500"/><span className="font-semibold text-sm">{q.title}</span><span className="text-xs text-gray-500">{q.description}</span></Button>)}
                    </div>
                  </div>
                </div>
              )}

              {step === 'contact' && (
                <div className="p-6 space-y-6 bg-gradient-to-br from-gray-50/50 to-blue-50/30 overflow-y-auto">
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ */}
                  <div className="text-center mb-6">
                    <h3 className="text-xl font-semibold text-gray-900 mb-2">–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º</h3>
                    <p className="text-gray-600">–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –ø–æ–º–æ–∂–µ–º</p>
                  </div>

                  <div className="space-y-5">
                    {!user ? (
                      <>
                        <div>
                          <label className="block text-sm font-semibold text-gray-900 mb-2">
                            –í–∞—à–µ –∏–º—è *
                          </label>
                          <Input
                            type="text"
                            value={contactForm.name}
                            onChange={(e) => setContactForm(prev => ({ ...prev, name: e.target.value }))}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                            className="h-12"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-semibold text-gray-900 mb-2">
                            Email *
                          </label>
                          <Input
                            type="email"
                            value={contactForm.email}
                            onChange={(e) => setContactForm(prev => ({ ...prev, email: e.target.value }))}
                            placeholder="your@email.com"
                            className="h-12"
                          />
                        </div>
                      </>
                    ) : (
                      <div className="bg-gradient-to-br from-green-50 to-green-100 border border-green-200 rounded-xl p-4">
                        <div className="flex items-center space-x-3">
                          <div className="w-10 h-10 bg-gradient-to-br from-green-100 to-green-200 rounded-full flex items-center justify-center">
                            <User className="w-5 h-5 text-green-600" />
                          </div>
                          <div>
                            <p className="font-semibold text-green-900">
                              {user.name}
                            </p>
                            <p className="text-sm text-green-700">
                              {user.email}
                            </p>
                          </div>
                          <Badge className="bg-gradient-to-r from-green-500 to-green-600 text-white border-0 shadow-sm">
                            –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
                          </Badge>
                        </div>
                      </div>
                    )}

                    {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ */}
                    <div>
                      <label className="block text-sm font-semibold text-gray-900 mb-3">
                        –¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
                      </label>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        {CONTACT_CATEGORIES.map((category, index) => {
                          const IconComponent = category.icon;
                          return (
                            <button
                              key={index}
                              type="button"
                              onClick={() => setContactForm(prev => ({ 
                                ...prev, 
                                message: category.value 
                              }))}
                              className={`p-4 bg-gradient-to-br ${category.color} border rounded-lg hover:shadow-md transition-all duration-300 text-center group`}
                            >
                              <IconComponent className="w-5 h-5 mx-auto mb-2" />
                              <div className="font-medium text-sm">{category.text}</div>
                            </button>
                          );
                        })}
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-semibold text-gray-900 mb-2">
                        –í–∞—à –≤–æ–ø—Ä–æ—Å *
                      </label>
                      <Textarea
                        value={contactForm.message}
                        onChange={(e) => setContactForm(prev => ({ ...prev, message: e.target.value }))}
                        placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ..."
                        className="min-h-[100px] resize-none"
                      />
                      <div className="flex justify-between items-center mt-2">
                        <span className="text-xs text-gray-500">
                          {contactForm.message.length}/500
                        </span>
                        {contactForm.message.length > 450 && (
                          <span className="text-xs text-orange-600">
                            –û—Å—Ç–∞–ª–æ—Å—å {500 - contactForm.message.length} —Å–∏–º–≤–æ–ª–æ–≤
                          </span>
                        )}
                      </div>
                    </div>

                    {/* –ì–∞—Ä–∞–Ω—Ç–∏–∏ */}
                    <div className="bg-gradient-to-br from-blue-50 to-indigo-50 border border-blue-200 rounded-xl p-4">
                      <div className="flex items-start space-x-3">
                        <CheckCircle className="w-5 h-5 text-blue-600 mt-0.5" />
                        <div className="text-sm">
                          <p className="font-semibold text-blue-900 mb-1">–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º</p>
                          <ul className="text-blue-800 space-y-1">
                            <li>‚Ä¢ –û—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</li>
                            <li>‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</li>
                            <li>‚Ä¢ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö</li>
                          </ul>
                        </div>
                      </div>
                    </div>

                    <div className="flex space-x-3">
                      <Button
                        variant="outline"
                        onClick={() => setStep('welcome')}
                        className="flex-1"
                      >
                        –ù–∞–∑–∞–¥
                      </Button>
                      <Button
                        onClick={handleContactSubmit}
                        disabled={loading || !contactForm.name.trim() || !contactForm.email.trim() || !contactForm.message.trim()}
                        className="flex-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                      >
                        {loading ? (
                          <div className="flex items-center space-x-2">
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                            <span>–û—Ç–ø—Ä–∞–≤–∫–∞...</span>
                          </div>
                        ) : (
                          <div className="flex items-center space-x-2">
                            <Send className="w-4 h-4" />
                            <span>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</span>
                          </div>
                        )}
                      </Button>
                    </div>
                  </div>
                </div>
              )}

              {step === 'chat' && (
                <div className="flex-1 flex flex-col min-h-0">
                  {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
                  <div 
                ref={chatMessagesRef}
                className="flex-1 overflow-y-auto p-4 space-y-3 bg-gray-50 min-h-[200px]"
                onScroll={checkIfAtBottom}
              >
                    {messages.map((message, index) => {
                      // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ —Ü–µ–Ω—Ç—Ä—É
                      if (message.type === 'system') {
                        return (
                          <div key={message._id || `msg-${index}`} className="flex justify-center my-3">
                            <div className="max-w-[80%] bg-amber-50 border border-amber-200 rounded-lg px-4 py-3">
                              <div className="flex items-center space-x-2">
                                <div className="w-5 h-5 bg-amber-500 rounded-full flex items-center justify-center flex-shrink-0">
                                  <Star className="w-3 h-3 text-white" />
                                </div>
                                <div className="flex-1">
                                  <div className="text-sm text-amber-900">
                                    {formatMessage(message.content, false)}
                                  </div>
                                </div>
                                <div className="text-xs text-amber-600">
                                  {formatTime(message.timestamp)}
                                </div>
                              </div>
                            </div>
                          </div>
                        );
                      }
                      
                      // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–æ–≤
                      return (
                        <div
                          key={message._id || `msg-${index}`}
                          className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'} mb-3`}
                        >
                          <div className={`flex items-end space-x-2 max-w-[80%] ${message.type === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
                            {/* –ê–≤–∞—Ç–∞—Ä */}
                            <div className={`flex-shrink-0 ${message.type === 'user' ? 'ml-2' : 'mr-2'}`}>
                              {message.type === 'admin' ? (
                                <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center">
                                  <Bot className="w-4 h-4 text-purple-600" />
                                </div>
                              ) : (
                                <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                                  <User className="w-4 h-4 text-blue-600" />
                                </div>
                              )}
                            </div>
                            
                            {/* –°–æ–æ–±—â–µ–Ω–∏–µ */}
                            <div className="flex flex-col">
                              {/* –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è */}
                              <div className={`text-xs font-medium mb-1 ${
                                message.type === 'user' ? 'text-right text-blue-600' : 'text-left text-purple-600'
                              }`}>
                                {message.author || (message.type === 'user' ? '–í—ã' : '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç')}
                              </div>
                              
                              {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è */}
                              <div
                                className={`relative px-4 py-3 rounded-lg ${
                                  message.type === 'user'
                                    ? 'bg-blue-600 text-white'
                                    : 'bg-white border border-gray-200 text-gray-900'
                                }`}
                              >
                                <div className="text-sm leading-relaxed whitespace-pre-wrap">
                                  {formatMessage(message.content, message.type === 'user')}
                                </div>
                                
                                {/* –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
                                <div className={`text-xs mt-2 ${
                                  message.type === 'user' ? 'text-blue-200' : 'text-gray-500'
                                }`}>
                                  {formatTime(message.timestamp)}
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                    <div ref={messagesEndRef} />
                  </div>

                  {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
                  <div className="border-t border-gray-200 p-4 bg-white flex-shrink-0">
                    <div className="flex space-x-3">
                      <Input
                        type="text"
                        value={newMessage}
                        onChange={(e) => setNewMessage(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && sendMessage()}
                        placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                        className="flex-1 h-10 text-sm"
                        disabled={loading}
                      />
                      <Button
                        onClick={() => sendMessage()}
                        disabled={!newMessage.trim() || loading}
                        className="h-10 px-4 bg-blue-600 hover:bg-blue-700"
                      >
                        <Send className="w-4 h-4" />
                      </Button>
                    </div>
                    
                    <div className="flex justify-between items-center mt-3">
                      <div className="flex items-center gap-2 text-xs text-gray-500">
                        <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                        <span>–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –æ–Ω–ª–∞–π–Ω</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={endChat}
                          className="text-xs h-7 px-2"
                        >
                          <XCircle className="w-3 h-3 mr-1" />
                          –ó–∞–≤–µ—Ä—à–∏—Ç—å
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={goToSurvey}
                          className="text-xs h-7 px-2"
                        >
                          <Star className="w-3 h-3 mr-1" />
                          –û—Ü–µ–Ω–∏—Ç—å
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {step === 'survey' && (
                <div className="p-6 space-y-6 bg-gradient-to-br from-gray-50/50 to-blue-50/30 overflow-y-auto">
                  {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
                  <div className="mb-6">
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-sm font-medium text-gray-700">
                        –í–æ–ø—Ä–æ—Å {currentSurveyQuestion + 1} –∏–∑ {SURVEY_QUESTIONS.length}
                      </span>
                      <span className="text-sm text-gray-500">
                        {Math.round(((currentSurveyQuestion + 1) / SURVEY_QUESTIONS.length) * 100)}%
                      </span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className="bg-gradient-to-r from-blue-500 to-purple-600 h-2 rounded-full transition-all duration-300"
                        style={{ width: `${((currentSurveyQuestion + 1) / SURVEY_QUESTIONS.length) * 100}%` }}
                      ></div>
                    </div>
                  </div>

                  {currentSurveyQuestion < SURVEY_QUESTIONS.length ? (
                    <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
                      <div className="text-center mb-6">
                        <div className="text-2xl mb-3">
                          {SURVEY_QUESTIONS[currentSurveyQuestion].emoji}
                        </div>
                        <h3 className="text-lg font-semibold text-gray-900 mb-2">
                          {SURVEY_QUESTIONS[currentSurveyQuestion].question}
                        </h3>
                      </div>

                      <div className="flex justify-center space-x-2 mb-6">
                        {[1, 2, 3, 4, 5].map((rating) => (
                          <button
                            key={rating}
                            onClick={() => {
                              const questionId = SURVEY_QUESTIONS[currentSurveyQuestion].id as keyof typeof surveyData;
                              setSurveyData(prev => ({
                                ...prev,
                                [questionId]: rating
                              }));
                            }}
                            className={`w-12 h-12 rounded-full border-2 font-semibold transition-all duration-300 ${
                              surveyData[SURVEY_QUESTIONS[currentSurveyQuestion].id as keyof typeof surveyData] === rating
                                ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white border-transparent shadow-lg'
                                : 'bg-white text-gray-700 border-gray-300 hover:border-blue-400 hover:bg-blue-50'
                            }`}
                          >
                            {rating}
                          </button>
                        ))}
                      </div>

                      <Button
                        onClick={() => setCurrentSurveyQuestion(prev => prev + 1)}
                        disabled={surveyData[SURVEY_QUESTIONS[currentSurveyQuestion].id as keyof typeof surveyData] === 0}
                        className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                      >
                        {currentSurveyQuestion === SURVEY_QUESTIONS.length - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å' : '–î–∞–ª–µ–µ'}
                      </Button>
                    </div>
                  ) : (
                    <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200 text-center">
                      <div className="text-4xl mb-4">üéâ</div>
                      <h3 className="text-xl font-semibold text-gray-900 mb-4">
                        –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!
                      </h3>
                      
                      <div className="mb-6">
                        <label className="block text-sm font-medium text-gray-700 mb-2 text-left">
                          –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                        </label>
                        <Textarea
                          value={surveyData.feedback}
                          onChange={(e) => setSurveyData(prev => ({ ...prev, feedback: e.target.value }))}
                          placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏..."
                          className="min-h-[80px] resize-none"
                        />
                      </div>

                      <div className="flex space-x-3">
                        <Button
                          variant="outline"
                          onClick={() => setStep('chat')}
                          className="flex-1"
                        >
                          –ù–∞–∑–∞–¥ –∫ —á–∞—Ç—É
                        </Button>
                        <Button
                          onClick={submitSurvey}
                          className="flex-1 bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800"
                        >
                          –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
                        </Button>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
            )}
          </div>
        </div>
      )}
    </>
  );
};

export default ChatWidget; 